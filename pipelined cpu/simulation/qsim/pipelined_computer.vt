// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/10/2020 22:39:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pipelined_computer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pipelined_computer_vlg_sample_tst(
	clock,
	in_port0,
	in_port1,
	resetn,
	sampler_tx
);
input  clock;
input [5:0] in_port0;
input [5:0] in_port1;
input  resetn;
output sampler_tx;

reg sample;
time current_time;
always @(clock or in_port0 or in_port1 or resetn)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pipelined_computer_vlg_check_tst (
	mem_clock,
	oealu,
	oins,
	oinst,
	omalu,
	onpc,
	opc,
	out_port0,
	out_port1,
	out_port2,
	out_port3,
	owalu,
	sampler_rx
);
input  mem_clock;
input [31:0] oealu;
input [31:0] oins;
input [31:0] oinst;
input [31:0] omalu;
input [31:0] onpc;
input [31:0] opc;
input [31:0] out_port0;
input [31:0] out_port1;
input [31:0] out_port2;
input [31:0] out_port3;
input [31:0] owalu;
input sampler_rx;

reg  mem_clock_expected;
reg [31:0] oealu_expected;
reg [31:0] oins_expected;
reg [31:0] oinst_expected;
reg [31:0] omalu_expected;
reg [31:0] onpc_expected;
reg [31:0] opc_expected;
reg [31:0] out_port0_expected;
reg [31:0] out_port1_expected;
reg [31:0] out_port2_expected;
reg [31:0] out_port3_expected;
reg [31:0] owalu_expected;

reg  mem_clock_prev;
reg [31:0] oealu_prev;
reg [31:0] oins_prev;
reg [31:0] oinst_prev;
reg [31:0] omalu_prev;
reg [31:0] onpc_prev;
reg [31:0] opc_prev;
reg [31:0] out_port0_prev;
reg [31:0] out_port1_prev;
reg [31:0] out_port2_prev;
reg [31:0] out_port3_prev;
reg [31:0] owalu_prev;

reg  mem_clock_expected_prev;
reg [31:0] oealu_expected_prev;
reg [31:0] oins_expected_prev;
reg [31:0] oinst_expected_prev;
reg [31:0] omalu_expected_prev;
reg [31:0] onpc_expected_prev;
reg [31:0] opc_expected_prev;
reg [31:0] out_port0_expected_prev;
reg [31:0] out_port1_expected_prev;
reg [31:0] out_port2_expected_prev;
reg [31:0] owalu_expected_prev;

reg  last_mem_clock_exp;
reg [31:0] last_oealu_exp;
reg [31:0] last_oins_exp;
reg [31:0] last_oinst_exp;
reg [31:0] last_omalu_exp;
reg [31:0] last_onpc_exp;
reg [31:0] last_opc_exp;
reg [31:0] last_out_port0_exp;
reg [31:0] last_out_port1_exp;
reg [31:0] last_out_port2_exp;
reg [31:0] last_owalu_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	mem_clock_prev = mem_clock;
	oealu_prev = oealu;
	oins_prev = oins;
	oinst_prev = oinst;
	omalu_prev = omalu;
	onpc_prev = onpc;
	opc_prev = opc;
	out_port0_prev = out_port0;
	out_port1_prev = out_port1;
	out_port2_prev = out_port2;
	out_port3_prev = out_port3;
	owalu_prev = owalu;
end

// update expected /o prevs

always @(trigger)
begin
	mem_clock_expected_prev = mem_clock_expected;
	oealu_expected_prev = oealu_expected;
	oins_expected_prev = oins_expected;
	oinst_expected_prev = oinst_expected;
	omalu_expected_prev = omalu_expected;
	onpc_expected_prev = onpc_expected;
	opc_expected_prev = opc_expected;
	out_port0_expected_prev = out_port0_expected;
	out_port1_expected_prev = out_port1_expected;
	out_port2_expected_prev = out_port2_expected;
	owalu_expected_prev = owalu_expected;
end



// expected mem_clock
initial
begin
	mem_clock_expected = 1'bX;
end 
// expected oealu[ 31 ]
initial
begin
	oealu_expected[31] = 1'bX;
end 
// expected oealu[ 30 ]
initial
begin
	oealu_expected[30] = 1'bX;
end 
// expected oealu[ 29 ]
initial
begin
	oealu_expected[29] = 1'bX;
end 
// expected oealu[ 28 ]
initial
begin
	oealu_expected[28] = 1'bX;
end 
// expected oealu[ 27 ]
initial
begin
	oealu_expected[27] = 1'bX;
end 
// expected oealu[ 26 ]
initial
begin
	oealu_expected[26] = 1'bX;
end 
// expected oealu[ 25 ]
initial
begin
	oealu_expected[25] = 1'bX;
end 
// expected oealu[ 24 ]
initial
begin
	oealu_expected[24] = 1'bX;
end 
// expected oealu[ 23 ]
initial
begin
	oealu_expected[23] = 1'bX;
end 
// expected oealu[ 22 ]
initial
begin
	oealu_expected[22] = 1'bX;
end 
// expected oealu[ 21 ]
initial
begin
	oealu_expected[21] = 1'bX;
end 
// expected oealu[ 20 ]
initial
begin
	oealu_expected[20] = 1'bX;
end 
// expected oealu[ 19 ]
initial
begin
	oealu_expected[19] = 1'bX;
end 
// expected oealu[ 18 ]
initial
begin
	oealu_expected[18] = 1'bX;
end 
// expected oealu[ 17 ]
initial
begin
	oealu_expected[17] = 1'bX;
end 
// expected oealu[ 16 ]
initial
begin
	oealu_expected[16] = 1'bX;
end 
// expected oealu[ 15 ]
initial
begin
	oealu_expected[15] = 1'bX;
end 
// expected oealu[ 14 ]
initial
begin
	oealu_expected[14] = 1'bX;
end 
// expected oealu[ 13 ]
initial
begin
	oealu_expected[13] = 1'bX;
end 
// expected oealu[ 12 ]
initial
begin
	oealu_expected[12] = 1'bX;
end 
// expected oealu[ 11 ]
initial
begin
	oealu_expected[11] = 1'bX;
end 
// expected oealu[ 10 ]
initial
begin
	oealu_expected[10] = 1'bX;
end 
// expected oealu[ 9 ]
initial
begin
	oealu_expected[9] = 1'bX;
end 
// expected oealu[ 8 ]
initial
begin
	oealu_expected[8] = 1'bX;
end 
// expected oealu[ 7 ]
initial
begin
	oealu_expected[7] = 1'bX;
end 
// expected oealu[ 6 ]
initial
begin
	oealu_expected[6] = 1'bX;
end 
// expected oealu[ 5 ]
initial
begin
	oealu_expected[5] = 1'bX;
end 
// expected oealu[ 4 ]
initial
begin
	oealu_expected[4] = 1'bX;
end 
// expected oealu[ 3 ]
initial
begin
	oealu_expected[3] = 1'bX;
end 
// expected oealu[ 2 ]
initial
begin
	oealu_expected[2] = 1'bX;
end 
// expected oealu[ 1 ]
initial
begin
	oealu_expected[1] = 1'bX;
end 
// expected oealu[ 0 ]
initial
begin
	oealu_expected[0] = 1'bX;
end 
// expected omalu[ 31 ]
initial
begin
	omalu_expected[31] = 1'bX;
end 
// expected omalu[ 30 ]
initial
begin
	omalu_expected[30] = 1'bX;
end 
// expected omalu[ 29 ]
initial
begin
	omalu_expected[29] = 1'bX;
end 
// expected omalu[ 28 ]
initial
begin
	omalu_expected[28] = 1'bX;
end 
// expected omalu[ 27 ]
initial
begin
	omalu_expected[27] = 1'bX;
end 
// expected omalu[ 26 ]
initial
begin
	omalu_expected[26] = 1'bX;
end 
// expected omalu[ 25 ]
initial
begin
	omalu_expected[25] = 1'bX;
end 
// expected omalu[ 24 ]
initial
begin
	omalu_expected[24] = 1'bX;
end 
// expected omalu[ 23 ]
initial
begin
	omalu_expected[23] = 1'bX;
end 
// expected omalu[ 22 ]
initial
begin
	omalu_expected[22] = 1'bX;
end 
// expected omalu[ 21 ]
initial
begin
	omalu_expected[21] = 1'bX;
end 
// expected omalu[ 20 ]
initial
begin
	omalu_expected[20] = 1'bX;
end 
// expected omalu[ 19 ]
initial
begin
	omalu_expected[19] = 1'bX;
end 
// expected omalu[ 18 ]
initial
begin
	omalu_expected[18] = 1'bX;
end 
// expected omalu[ 17 ]
initial
begin
	omalu_expected[17] = 1'bX;
end 
// expected omalu[ 16 ]
initial
begin
	omalu_expected[16] = 1'bX;
end 
// expected omalu[ 15 ]
initial
begin
	omalu_expected[15] = 1'bX;
end 
// expected omalu[ 14 ]
initial
begin
	omalu_expected[14] = 1'bX;
end 
// expected omalu[ 13 ]
initial
begin
	omalu_expected[13] = 1'bX;
end 
// expected omalu[ 12 ]
initial
begin
	omalu_expected[12] = 1'bX;
end 
// expected omalu[ 11 ]
initial
begin
	omalu_expected[11] = 1'bX;
end 
// expected omalu[ 10 ]
initial
begin
	omalu_expected[10] = 1'bX;
end 
// expected omalu[ 9 ]
initial
begin
	omalu_expected[9] = 1'bX;
end 
// expected omalu[ 8 ]
initial
begin
	omalu_expected[8] = 1'bX;
end 
// expected omalu[ 7 ]
initial
begin
	omalu_expected[7] = 1'bX;
end 
// expected omalu[ 6 ]
initial
begin
	omalu_expected[6] = 1'bX;
end 
// expected omalu[ 5 ]
initial
begin
	omalu_expected[5] = 1'bX;
end 
// expected omalu[ 4 ]
initial
begin
	omalu_expected[4] = 1'bX;
end 
// expected omalu[ 3 ]
initial
begin
	omalu_expected[3] = 1'bX;
end 
// expected omalu[ 2 ]
initial
begin
	omalu_expected[2] = 1'bX;
end 
// expected omalu[ 1 ]
initial
begin
	omalu_expected[1] = 1'bX;
end 
// expected omalu[ 0 ]
initial
begin
	omalu_expected[0] = 1'bX;
end 
// expected owalu[ 31 ]
initial
begin
	owalu_expected[31] = 1'bX;
end 
// expected owalu[ 30 ]
initial
begin
	owalu_expected[30] = 1'bX;
end 
// expected owalu[ 29 ]
initial
begin
	owalu_expected[29] = 1'bX;
end 
// expected owalu[ 28 ]
initial
begin
	owalu_expected[28] = 1'bX;
end 
// expected owalu[ 27 ]
initial
begin
	owalu_expected[27] = 1'bX;
end 
// expected owalu[ 26 ]
initial
begin
	owalu_expected[26] = 1'bX;
end 
// expected owalu[ 25 ]
initial
begin
	owalu_expected[25] = 1'bX;
end 
// expected owalu[ 24 ]
initial
begin
	owalu_expected[24] = 1'bX;
end 
// expected owalu[ 23 ]
initial
begin
	owalu_expected[23] = 1'bX;
end 
// expected owalu[ 22 ]
initial
begin
	owalu_expected[22] = 1'bX;
end 
// expected owalu[ 21 ]
initial
begin
	owalu_expected[21] = 1'bX;
end 
// expected owalu[ 20 ]
initial
begin
	owalu_expected[20] = 1'bX;
end 
// expected owalu[ 19 ]
initial
begin
	owalu_expected[19] = 1'bX;
end 
// expected owalu[ 18 ]
initial
begin
	owalu_expected[18] = 1'bX;
end 
// expected owalu[ 17 ]
initial
begin
	owalu_expected[17] = 1'bX;
end 
// expected owalu[ 16 ]
initial
begin
	owalu_expected[16] = 1'bX;
end 
// expected owalu[ 15 ]
initial
begin
	owalu_expected[15] = 1'bX;
end 
// expected owalu[ 14 ]
initial
begin
	owalu_expected[14] = 1'bX;
end 
// expected owalu[ 13 ]
initial
begin
	owalu_expected[13] = 1'bX;
end 
// expected owalu[ 12 ]
initial
begin
	owalu_expected[12] = 1'bX;
end 
// expected owalu[ 11 ]
initial
begin
	owalu_expected[11] = 1'bX;
end 
// expected owalu[ 10 ]
initial
begin
	owalu_expected[10] = 1'bX;
end 
// expected owalu[ 9 ]
initial
begin
	owalu_expected[9] = 1'bX;
end 
// expected owalu[ 8 ]
initial
begin
	owalu_expected[8] = 1'bX;
end 
// expected owalu[ 7 ]
initial
begin
	owalu_expected[7] = 1'bX;
end 
// expected owalu[ 6 ]
initial
begin
	owalu_expected[6] = 1'bX;
end 
// expected owalu[ 5 ]
initial
begin
	owalu_expected[5] = 1'bX;
end 
// expected owalu[ 4 ]
initial
begin
	owalu_expected[4] = 1'bX;
end 
// expected owalu[ 3 ]
initial
begin
	owalu_expected[3] = 1'bX;
end 
// expected owalu[ 2 ]
initial
begin
	owalu_expected[2] = 1'bX;
end 
// expected owalu[ 1 ]
initial
begin
	owalu_expected[1] = 1'bX;
end 
// expected owalu[ 0 ]
initial
begin
	owalu_expected[0] = 1'bX;
end 
// expected onpc[ 31 ]
initial
begin
	onpc_expected[31] = 1'bX;
end 
// expected onpc[ 30 ]
initial
begin
	onpc_expected[30] = 1'bX;
end 
// expected onpc[ 29 ]
initial
begin
	onpc_expected[29] = 1'bX;
end 
// expected onpc[ 28 ]
initial
begin
	onpc_expected[28] = 1'bX;
end 
// expected onpc[ 27 ]
initial
begin
	onpc_expected[27] = 1'bX;
end 
// expected onpc[ 26 ]
initial
begin
	onpc_expected[26] = 1'bX;
end 
// expected onpc[ 25 ]
initial
begin
	onpc_expected[25] = 1'bX;
end 
// expected onpc[ 24 ]
initial
begin
	onpc_expected[24] = 1'bX;
end 
// expected onpc[ 23 ]
initial
begin
	onpc_expected[23] = 1'bX;
end 
// expected onpc[ 22 ]
initial
begin
	onpc_expected[22] = 1'bX;
end 
// expected onpc[ 21 ]
initial
begin
	onpc_expected[21] = 1'bX;
end 
// expected onpc[ 20 ]
initial
begin
	onpc_expected[20] = 1'bX;
end 
// expected onpc[ 19 ]
initial
begin
	onpc_expected[19] = 1'bX;
end 
// expected onpc[ 18 ]
initial
begin
	onpc_expected[18] = 1'bX;
end 
// expected onpc[ 17 ]
initial
begin
	onpc_expected[17] = 1'bX;
end 
// expected onpc[ 16 ]
initial
begin
	onpc_expected[16] = 1'bX;
end 
// expected onpc[ 15 ]
initial
begin
	onpc_expected[15] = 1'bX;
end 
// expected onpc[ 14 ]
initial
begin
	onpc_expected[14] = 1'bX;
end 
// expected onpc[ 13 ]
initial
begin
	onpc_expected[13] = 1'bX;
end 
// expected onpc[ 12 ]
initial
begin
	onpc_expected[12] = 1'bX;
end 
// expected onpc[ 11 ]
initial
begin
	onpc_expected[11] = 1'bX;
end 
// expected onpc[ 10 ]
initial
begin
	onpc_expected[10] = 1'bX;
end 
// expected onpc[ 9 ]
initial
begin
	onpc_expected[9] = 1'bX;
end 
// expected onpc[ 8 ]
initial
begin
	onpc_expected[8] = 1'bX;
end 
// expected onpc[ 7 ]
initial
begin
	onpc_expected[7] = 1'bX;
end 
// expected onpc[ 6 ]
initial
begin
	onpc_expected[6] = 1'bX;
end 
// expected onpc[ 5 ]
initial
begin
	onpc_expected[5] = 1'bX;
end 
// expected onpc[ 4 ]
initial
begin
	onpc_expected[4] = 1'bX;
end 
// expected onpc[ 3 ]
initial
begin
	onpc_expected[3] = 1'bX;
end 
// expected onpc[ 2 ]
initial
begin
	onpc_expected[2] = 1'bX;
end 
// expected onpc[ 1 ]
initial
begin
	onpc_expected[1] = 1'bX;
end 
// expected onpc[ 0 ]
initial
begin
	onpc_expected[0] = 1'bX;
end 
// expected opc[ 31 ]
initial
begin
	opc_expected[31] = 1'bX;
end 
// expected opc[ 30 ]
initial
begin
	opc_expected[30] = 1'bX;
end 
// expected opc[ 29 ]
initial
begin
	opc_expected[29] = 1'bX;
end 
// expected opc[ 28 ]
initial
begin
	opc_expected[28] = 1'bX;
end 
// expected opc[ 27 ]
initial
begin
	opc_expected[27] = 1'bX;
end 
// expected opc[ 26 ]
initial
begin
	opc_expected[26] = 1'bX;
end 
// expected opc[ 25 ]
initial
begin
	opc_expected[25] = 1'bX;
end 
// expected opc[ 24 ]
initial
begin
	opc_expected[24] = 1'bX;
end 
// expected opc[ 23 ]
initial
begin
	opc_expected[23] = 1'bX;
end 
// expected opc[ 22 ]
initial
begin
	opc_expected[22] = 1'bX;
end 
// expected opc[ 21 ]
initial
begin
	opc_expected[21] = 1'bX;
end 
// expected opc[ 20 ]
initial
begin
	opc_expected[20] = 1'bX;
end 
// expected opc[ 19 ]
initial
begin
	opc_expected[19] = 1'bX;
end 
// expected opc[ 18 ]
initial
begin
	opc_expected[18] = 1'bX;
end 
// expected opc[ 17 ]
initial
begin
	opc_expected[17] = 1'bX;
end 
// expected opc[ 16 ]
initial
begin
	opc_expected[16] = 1'bX;
end 
// expected opc[ 15 ]
initial
begin
	opc_expected[15] = 1'bX;
end 
// expected opc[ 14 ]
initial
begin
	opc_expected[14] = 1'bX;
end 
// expected opc[ 13 ]
initial
begin
	opc_expected[13] = 1'bX;
end 
// expected opc[ 12 ]
initial
begin
	opc_expected[12] = 1'bX;
end 
// expected opc[ 11 ]
initial
begin
	opc_expected[11] = 1'bX;
end 
// expected opc[ 10 ]
initial
begin
	opc_expected[10] = 1'bX;
end 
// expected opc[ 9 ]
initial
begin
	opc_expected[9] = 1'bX;
end 
// expected opc[ 8 ]
initial
begin
	opc_expected[8] = 1'bX;
end 
// expected opc[ 7 ]
initial
begin
	opc_expected[7] = 1'bX;
end 
// expected opc[ 6 ]
initial
begin
	opc_expected[6] = 1'bX;
end 
// expected opc[ 5 ]
initial
begin
	opc_expected[5] = 1'bX;
end 
// expected opc[ 4 ]
initial
begin
	opc_expected[4] = 1'bX;
end 
// expected opc[ 3 ]
initial
begin
	opc_expected[3] = 1'bX;
end 
// expected opc[ 2 ]
initial
begin
	opc_expected[2] = 1'bX;
end 
// expected opc[ 1 ]
initial
begin
	opc_expected[1] = 1'bX;
end 
// expected opc[ 0 ]
initial
begin
	opc_expected[0] = 1'bX;
end 
// expected oinst[ 31 ]
initial
begin
	oinst_expected[31] = 1'bX;
end 
// expected oinst[ 30 ]
initial
begin
	oinst_expected[30] = 1'bX;
end 
// expected oinst[ 29 ]
initial
begin
	oinst_expected[29] = 1'bX;
end 
// expected oinst[ 28 ]
initial
begin
	oinst_expected[28] = 1'bX;
end 
// expected oinst[ 27 ]
initial
begin
	oinst_expected[27] = 1'bX;
end 
// expected oinst[ 26 ]
initial
begin
	oinst_expected[26] = 1'bX;
end 
// expected oinst[ 25 ]
initial
begin
	oinst_expected[25] = 1'bX;
end 
// expected oinst[ 24 ]
initial
begin
	oinst_expected[24] = 1'bX;
end 
// expected oinst[ 23 ]
initial
begin
	oinst_expected[23] = 1'bX;
end 
// expected oinst[ 22 ]
initial
begin
	oinst_expected[22] = 1'bX;
end 
// expected oinst[ 21 ]
initial
begin
	oinst_expected[21] = 1'bX;
end 
// expected oinst[ 20 ]
initial
begin
	oinst_expected[20] = 1'bX;
end 
// expected oinst[ 19 ]
initial
begin
	oinst_expected[19] = 1'bX;
end 
// expected oinst[ 18 ]
initial
begin
	oinst_expected[18] = 1'bX;
end 
// expected oinst[ 17 ]
initial
begin
	oinst_expected[17] = 1'bX;
end 
// expected oinst[ 16 ]
initial
begin
	oinst_expected[16] = 1'bX;
end 
// expected oinst[ 15 ]
initial
begin
	oinst_expected[15] = 1'bX;
end 
// expected oinst[ 14 ]
initial
begin
	oinst_expected[14] = 1'bX;
end 
// expected oinst[ 13 ]
initial
begin
	oinst_expected[13] = 1'bX;
end 
// expected oinst[ 12 ]
initial
begin
	oinst_expected[12] = 1'bX;
end 
// expected oinst[ 11 ]
initial
begin
	oinst_expected[11] = 1'bX;
end 
// expected oinst[ 10 ]
initial
begin
	oinst_expected[10] = 1'bX;
end 
// expected oinst[ 9 ]
initial
begin
	oinst_expected[9] = 1'bX;
end 
// expected oinst[ 8 ]
initial
begin
	oinst_expected[8] = 1'bX;
end 
// expected oinst[ 7 ]
initial
begin
	oinst_expected[7] = 1'bX;
end 
// expected oinst[ 6 ]
initial
begin
	oinst_expected[6] = 1'bX;
end 
// expected oinst[ 5 ]
initial
begin
	oinst_expected[5] = 1'bX;
end 
// expected oinst[ 4 ]
initial
begin
	oinst_expected[4] = 1'bX;
end 
// expected oinst[ 3 ]
initial
begin
	oinst_expected[3] = 1'bX;
end 
// expected oinst[ 2 ]
initial
begin
	oinst_expected[2] = 1'bX;
end 
// expected oinst[ 1 ]
initial
begin
	oinst_expected[1] = 1'bX;
end 
// expected oinst[ 0 ]
initial
begin
	oinst_expected[0] = 1'bX;
end 
// expected oins[ 31 ]
initial
begin
	oins_expected[31] = 1'bX;
end 
// expected oins[ 30 ]
initial
begin
	oins_expected[30] = 1'bX;
end 
// expected oins[ 29 ]
initial
begin
	oins_expected[29] = 1'bX;
end 
// expected oins[ 28 ]
initial
begin
	oins_expected[28] = 1'bX;
end 
// expected oins[ 27 ]
initial
begin
	oins_expected[27] = 1'bX;
end 
// expected oins[ 26 ]
initial
begin
	oins_expected[26] = 1'bX;
end 
// expected oins[ 25 ]
initial
begin
	oins_expected[25] = 1'bX;
end 
// expected oins[ 24 ]
initial
begin
	oins_expected[24] = 1'bX;
end 
// expected oins[ 23 ]
initial
begin
	oins_expected[23] = 1'bX;
end 
// expected oins[ 22 ]
initial
begin
	oins_expected[22] = 1'bX;
end 
// expected oins[ 21 ]
initial
begin
	oins_expected[21] = 1'bX;
end 
// expected oins[ 20 ]
initial
begin
	oins_expected[20] = 1'bX;
end 
// expected oins[ 19 ]
initial
begin
	oins_expected[19] = 1'bX;
end 
// expected oins[ 18 ]
initial
begin
	oins_expected[18] = 1'bX;
end 
// expected oins[ 17 ]
initial
begin
	oins_expected[17] = 1'bX;
end 
// expected oins[ 16 ]
initial
begin
	oins_expected[16] = 1'bX;
end 
// expected oins[ 15 ]
initial
begin
	oins_expected[15] = 1'bX;
end 
// expected oins[ 14 ]
initial
begin
	oins_expected[14] = 1'bX;
end 
// expected oins[ 13 ]
initial
begin
	oins_expected[13] = 1'bX;
end 
// expected oins[ 12 ]
initial
begin
	oins_expected[12] = 1'bX;
end 
// expected oins[ 11 ]
initial
begin
	oins_expected[11] = 1'bX;
end 
// expected oins[ 10 ]
initial
begin
	oins_expected[10] = 1'bX;
end 
// expected oins[ 9 ]
initial
begin
	oins_expected[9] = 1'bX;
end 
// expected oins[ 8 ]
initial
begin
	oins_expected[8] = 1'bX;
end 
// expected oins[ 7 ]
initial
begin
	oins_expected[7] = 1'bX;
end 
// expected oins[ 6 ]
initial
begin
	oins_expected[6] = 1'bX;
end 
// expected oins[ 5 ]
initial
begin
	oins_expected[5] = 1'bX;
end 
// expected oins[ 4 ]
initial
begin
	oins_expected[4] = 1'bX;
end 
// expected oins[ 3 ]
initial
begin
	oins_expected[3] = 1'bX;
end 
// expected oins[ 2 ]
initial
begin
	oins_expected[2] = 1'bX;
end 
// expected oins[ 1 ]
initial
begin
	oins_expected[1] = 1'bX;
end 
// expected oins[ 0 ]
initial
begin
	oins_expected[0] = 1'bX;
end 
// expected out_port0[ 31 ]
initial
begin
	out_port0_expected[31] = 1'bX;
end 
// expected out_port0[ 30 ]
initial
begin
	out_port0_expected[30] = 1'bX;
end 
// expected out_port0[ 29 ]
initial
begin
	out_port0_expected[29] = 1'bX;
end 
// expected out_port0[ 28 ]
initial
begin
	out_port0_expected[28] = 1'bX;
end 
// expected out_port0[ 27 ]
initial
begin
	out_port0_expected[27] = 1'bX;
end 
// expected out_port0[ 26 ]
initial
begin
	out_port0_expected[26] = 1'bX;
end 
// expected out_port0[ 25 ]
initial
begin
	out_port0_expected[25] = 1'bX;
end 
// expected out_port0[ 24 ]
initial
begin
	out_port0_expected[24] = 1'bX;
end 
// expected out_port0[ 23 ]
initial
begin
	out_port0_expected[23] = 1'bX;
end 
// expected out_port0[ 22 ]
initial
begin
	out_port0_expected[22] = 1'bX;
end 
// expected out_port0[ 21 ]
initial
begin
	out_port0_expected[21] = 1'bX;
end 
// expected out_port0[ 20 ]
initial
begin
	out_port0_expected[20] = 1'bX;
end 
// expected out_port0[ 19 ]
initial
begin
	out_port0_expected[19] = 1'bX;
end 
// expected out_port0[ 18 ]
initial
begin
	out_port0_expected[18] = 1'bX;
end 
// expected out_port0[ 17 ]
initial
begin
	out_port0_expected[17] = 1'bX;
end 
// expected out_port0[ 16 ]
initial
begin
	out_port0_expected[16] = 1'bX;
end 
// expected out_port0[ 15 ]
initial
begin
	out_port0_expected[15] = 1'bX;
end 
// expected out_port0[ 14 ]
initial
begin
	out_port0_expected[14] = 1'bX;
end 
// expected out_port0[ 13 ]
initial
begin
	out_port0_expected[13] = 1'bX;
end 
// expected out_port0[ 12 ]
initial
begin
	out_port0_expected[12] = 1'bX;
end 
// expected out_port0[ 11 ]
initial
begin
	out_port0_expected[11] = 1'bX;
end 
// expected out_port0[ 10 ]
initial
begin
	out_port0_expected[10] = 1'bX;
end 
// expected out_port0[ 9 ]
initial
begin
	out_port0_expected[9] = 1'bX;
end 
// expected out_port0[ 8 ]
initial
begin
	out_port0_expected[8] = 1'bX;
end 
// expected out_port0[ 7 ]
initial
begin
	out_port0_expected[7] = 1'bX;
end 
// expected out_port0[ 6 ]
initial
begin
	out_port0_expected[6] = 1'bX;
end 
// expected out_port0[ 5 ]
initial
begin
	out_port0_expected[5] = 1'bX;
end 
// expected out_port0[ 4 ]
initial
begin
	out_port0_expected[4] = 1'bX;
end 
// expected out_port0[ 3 ]
initial
begin
	out_port0_expected[3] = 1'bX;
end 
// expected out_port0[ 2 ]
initial
begin
	out_port0_expected[2] = 1'bX;
end 
// expected out_port0[ 1 ]
initial
begin
	out_port0_expected[1] = 1'bX;
end 
// expected out_port0[ 0 ]
initial
begin
	out_port0_expected[0] = 1'bX;
end 
// expected out_port1[ 31 ]
initial
begin
	out_port1_expected[31] = 1'bX;
end 
// expected out_port1[ 30 ]
initial
begin
	out_port1_expected[30] = 1'bX;
end 
// expected out_port1[ 29 ]
initial
begin
	out_port1_expected[29] = 1'bX;
end 
// expected out_port1[ 28 ]
initial
begin
	out_port1_expected[28] = 1'bX;
end 
// expected out_port1[ 27 ]
initial
begin
	out_port1_expected[27] = 1'bX;
end 
// expected out_port1[ 26 ]
initial
begin
	out_port1_expected[26] = 1'bX;
end 
// expected out_port1[ 25 ]
initial
begin
	out_port1_expected[25] = 1'bX;
end 
// expected out_port1[ 24 ]
initial
begin
	out_port1_expected[24] = 1'bX;
end 
// expected out_port1[ 23 ]
initial
begin
	out_port1_expected[23] = 1'bX;
end 
// expected out_port1[ 22 ]
initial
begin
	out_port1_expected[22] = 1'bX;
end 
// expected out_port1[ 21 ]
initial
begin
	out_port1_expected[21] = 1'bX;
end 
// expected out_port1[ 20 ]
initial
begin
	out_port1_expected[20] = 1'bX;
end 
// expected out_port1[ 19 ]
initial
begin
	out_port1_expected[19] = 1'bX;
end 
// expected out_port1[ 18 ]
initial
begin
	out_port1_expected[18] = 1'bX;
end 
// expected out_port1[ 17 ]
initial
begin
	out_port1_expected[17] = 1'bX;
end 
// expected out_port1[ 16 ]
initial
begin
	out_port1_expected[16] = 1'bX;
end 
// expected out_port1[ 15 ]
initial
begin
	out_port1_expected[15] = 1'bX;
end 
// expected out_port1[ 14 ]
initial
begin
	out_port1_expected[14] = 1'bX;
end 
// expected out_port1[ 13 ]
initial
begin
	out_port1_expected[13] = 1'bX;
end 
// expected out_port1[ 12 ]
initial
begin
	out_port1_expected[12] = 1'bX;
end 
// expected out_port1[ 11 ]
initial
begin
	out_port1_expected[11] = 1'bX;
end 
// expected out_port1[ 10 ]
initial
begin
	out_port1_expected[10] = 1'bX;
end 
// expected out_port1[ 9 ]
initial
begin
	out_port1_expected[9] = 1'bX;
end 
// expected out_port1[ 8 ]
initial
begin
	out_port1_expected[8] = 1'bX;
end 
// expected out_port1[ 7 ]
initial
begin
	out_port1_expected[7] = 1'bX;
end 
// expected out_port1[ 6 ]
initial
begin
	out_port1_expected[6] = 1'bX;
end 
// expected out_port1[ 5 ]
initial
begin
	out_port1_expected[5] = 1'bX;
end 
// expected out_port1[ 4 ]
initial
begin
	out_port1_expected[4] = 1'bX;
end 
// expected out_port1[ 3 ]
initial
begin
	out_port1_expected[3] = 1'bX;
end 
// expected out_port1[ 2 ]
initial
begin
	out_port1_expected[2] = 1'bX;
end 
// expected out_port1[ 1 ]
initial
begin
	out_port1_expected[1] = 1'bX;
end 
// expected out_port1[ 0 ]
initial
begin
	out_port1_expected[0] = 1'bX;
end 
// expected out_port2[ 31 ]
initial
begin
	out_port2_expected[31] = 1'bX;
end 
// expected out_port2[ 30 ]
initial
begin
	out_port2_expected[30] = 1'bX;
end 
// expected out_port2[ 29 ]
initial
begin
	out_port2_expected[29] = 1'bX;
end 
// expected out_port2[ 28 ]
initial
begin
	out_port2_expected[28] = 1'bX;
end 
// expected out_port2[ 27 ]
initial
begin
	out_port2_expected[27] = 1'bX;
end 
// expected out_port2[ 26 ]
initial
begin
	out_port2_expected[26] = 1'bX;
end 
// expected out_port2[ 25 ]
initial
begin
	out_port2_expected[25] = 1'bX;
end 
// expected out_port2[ 24 ]
initial
begin
	out_port2_expected[24] = 1'bX;
end 
// expected out_port2[ 23 ]
initial
begin
	out_port2_expected[23] = 1'bX;
end 
// expected out_port2[ 22 ]
initial
begin
	out_port2_expected[22] = 1'bX;
end 
// expected out_port2[ 21 ]
initial
begin
	out_port2_expected[21] = 1'bX;
end 
// expected out_port2[ 20 ]
initial
begin
	out_port2_expected[20] = 1'bX;
end 
// expected out_port2[ 19 ]
initial
begin
	out_port2_expected[19] = 1'bX;
end 
// expected out_port2[ 18 ]
initial
begin
	out_port2_expected[18] = 1'bX;
end 
// expected out_port2[ 17 ]
initial
begin
	out_port2_expected[17] = 1'bX;
end 
// expected out_port2[ 16 ]
initial
begin
	out_port2_expected[16] = 1'bX;
end 
// expected out_port2[ 15 ]
initial
begin
	out_port2_expected[15] = 1'bX;
end 
// expected out_port2[ 14 ]
initial
begin
	out_port2_expected[14] = 1'bX;
end 
// expected out_port2[ 13 ]
initial
begin
	out_port2_expected[13] = 1'bX;
end 
// expected out_port2[ 12 ]
initial
begin
	out_port2_expected[12] = 1'bX;
end 
// expected out_port2[ 11 ]
initial
begin
	out_port2_expected[11] = 1'bX;
end 
// expected out_port2[ 10 ]
initial
begin
	out_port2_expected[10] = 1'bX;
end 
// expected out_port2[ 9 ]
initial
begin
	out_port2_expected[9] = 1'bX;
end 
// expected out_port2[ 8 ]
initial
begin
	out_port2_expected[8] = 1'bX;
end 
// expected out_port2[ 7 ]
initial
begin
	out_port2_expected[7] = 1'bX;
end 
// expected out_port2[ 6 ]
initial
begin
	out_port2_expected[6] = 1'bX;
end 
// expected out_port2[ 5 ]
initial
begin
	out_port2_expected[5] = 1'bX;
end 
// expected out_port2[ 4 ]
initial
begin
	out_port2_expected[4] = 1'bX;
end 
// expected out_port2[ 3 ]
initial
begin
	out_port2_expected[3] = 1'bX;
end 
// expected out_port2[ 2 ]
initial
begin
	out_port2_expected[2] = 1'bX;
end 
// expected out_port2[ 1 ]
initial
begin
	out_port2_expected[1] = 1'bX;
end 
// expected out_port2[ 0 ]
initial
begin
	out_port2_expected[0] = 1'bX;
end 
// generate trigger
always @(mem_clock_expected or mem_clock or oealu_expected or oealu or oins_expected or oins or oinst_expected or oinst or omalu_expected or omalu or onpc_expected or onpc or opc_expected or opc or out_port0_expected or out_port0 or out_port1_expected or out_port1 or out_port2_expected or out_port2 or out_port3_expected or out_port3 or owalu_expected or owalu)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mem_clock = %b | expected oealu = %b | expected oins = %b | expected oinst = %b | expected omalu = %b | expected onpc = %b | expected opc = %b | expected out_port0 = %b | expected out_port1 = %b | expected out_port2 = %b | expected out_port3 = %b | expected owalu = %b | ",mem_clock_expected_prev,oealu_expected_prev,oins_expected_prev,oinst_expected_prev,omalu_expected_prev,onpc_expected_prev,opc_expected_prev,out_port0_expected_prev,out_port1_expected_prev,out_port2_expected_prev,out_port3_expected_prev,owalu_expected_prev);
	$display("| real mem_clock = %b | real oealu = %b | real oins = %b | real oinst = %b | real omalu = %b | real onpc = %b | real opc = %b | real out_port0 = %b | real out_port1 = %b | real out_port2 = %b | real out_port3 = %b | real owalu = %b | ",mem_clock_prev,oealu_prev,oins_prev,oinst_prev,omalu_prev,onpc_prev,opc_prev,out_port0_prev,out_port1_prev,out_port2_prev,out_port3_prev,owalu_prev);
`endif
	if (
		( mem_clock_expected_prev !== 1'bx ) && ( mem_clock_prev !== mem_clock_expected_prev )
		&& ((mem_clock_expected_prev !== last_mem_clock_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_clock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_clock_expected_prev);
		$display ("     Real value = %b", mem_clock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mem_clock_exp = mem_clock_expected_prev;
	end
	if (
		( oealu_expected_prev[0] !== 1'bx ) && ( oealu_prev[0] !== oealu_expected_prev[0] )
		&& ((oealu_expected_prev[0] !== last_oealu_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[0] = oealu_expected_prev[0];
	end
	if (
		( oealu_expected_prev[1] !== 1'bx ) && ( oealu_prev[1] !== oealu_expected_prev[1] )
		&& ((oealu_expected_prev[1] !== last_oealu_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[1] = oealu_expected_prev[1];
	end
	if (
		( oealu_expected_prev[2] !== 1'bx ) && ( oealu_prev[2] !== oealu_expected_prev[2] )
		&& ((oealu_expected_prev[2] !== last_oealu_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[2] = oealu_expected_prev[2];
	end
	if (
		( oealu_expected_prev[3] !== 1'bx ) && ( oealu_prev[3] !== oealu_expected_prev[3] )
		&& ((oealu_expected_prev[3] !== last_oealu_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[3] = oealu_expected_prev[3];
	end
	if (
		( oealu_expected_prev[4] !== 1'bx ) && ( oealu_prev[4] !== oealu_expected_prev[4] )
		&& ((oealu_expected_prev[4] !== last_oealu_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[4] = oealu_expected_prev[4];
	end
	if (
		( oealu_expected_prev[5] !== 1'bx ) && ( oealu_prev[5] !== oealu_expected_prev[5] )
		&& ((oealu_expected_prev[5] !== last_oealu_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[5] = oealu_expected_prev[5];
	end
	if (
		( oealu_expected_prev[6] !== 1'bx ) && ( oealu_prev[6] !== oealu_expected_prev[6] )
		&& ((oealu_expected_prev[6] !== last_oealu_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[6] = oealu_expected_prev[6];
	end
	if (
		( oealu_expected_prev[7] !== 1'bx ) && ( oealu_prev[7] !== oealu_expected_prev[7] )
		&& ((oealu_expected_prev[7] !== last_oealu_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[7] = oealu_expected_prev[7];
	end
	if (
		( oealu_expected_prev[8] !== 1'bx ) && ( oealu_prev[8] !== oealu_expected_prev[8] )
		&& ((oealu_expected_prev[8] !== last_oealu_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[8] = oealu_expected_prev[8];
	end
	if (
		( oealu_expected_prev[9] !== 1'bx ) && ( oealu_prev[9] !== oealu_expected_prev[9] )
		&& ((oealu_expected_prev[9] !== last_oealu_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[9] = oealu_expected_prev[9];
	end
	if (
		( oealu_expected_prev[10] !== 1'bx ) && ( oealu_prev[10] !== oealu_expected_prev[10] )
		&& ((oealu_expected_prev[10] !== last_oealu_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[10] = oealu_expected_prev[10];
	end
	if (
		( oealu_expected_prev[11] !== 1'bx ) && ( oealu_prev[11] !== oealu_expected_prev[11] )
		&& ((oealu_expected_prev[11] !== last_oealu_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[11] = oealu_expected_prev[11];
	end
	if (
		( oealu_expected_prev[12] !== 1'bx ) && ( oealu_prev[12] !== oealu_expected_prev[12] )
		&& ((oealu_expected_prev[12] !== last_oealu_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[12] = oealu_expected_prev[12];
	end
	if (
		( oealu_expected_prev[13] !== 1'bx ) && ( oealu_prev[13] !== oealu_expected_prev[13] )
		&& ((oealu_expected_prev[13] !== last_oealu_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[13] = oealu_expected_prev[13];
	end
	if (
		( oealu_expected_prev[14] !== 1'bx ) && ( oealu_prev[14] !== oealu_expected_prev[14] )
		&& ((oealu_expected_prev[14] !== last_oealu_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[14] = oealu_expected_prev[14];
	end
	if (
		( oealu_expected_prev[15] !== 1'bx ) && ( oealu_prev[15] !== oealu_expected_prev[15] )
		&& ((oealu_expected_prev[15] !== last_oealu_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[15] = oealu_expected_prev[15];
	end
	if (
		( oealu_expected_prev[16] !== 1'bx ) && ( oealu_prev[16] !== oealu_expected_prev[16] )
		&& ((oealu_expected_prev[16] !== last_oealu_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[16] = oealu_expected_prev[16];
	end
	if (
		( oealu_expected_prev[17] !== 1'bx ) && ( oealu_prev[17] !== oealu_expected_prev[17] )
		&& ((oealu_expected_prev[17] !== last_oealu_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[17] = oealu_expected_prev[17];
	end
	if (
		( oealu_expected_prev[18] !== 1'bx ) && ( oealu_prev[18] !== oealu_expected_prev[18] )
		&& ((oealu_expected_prev[18] !== last_oealu_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[18] = oealu_expected_prev[18];
	end
	if (
		( oealu_expected_prev[19] !== 1'bx ) && ( oealu_prev[19] !== oealu_expected_prev[19] )
		&& ((oealu_expected_prev[19] !== last_oealu_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[19] = oealu_expected_prev[19];
	end
	if (
		( oealu_expected_prev[20] !== 1'bx ) && ( oealu_prev[20] !== oealu_expected_prev[20] )
		&& ((oealu_expected_prev[20] !== last_oealu_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[20] = oealu_expected_prev[20];
	end
	if (
		( oealu_expected_prev[21] !== 1'bx ) && ( oealu_prev[21] !== oealu_expected_prev[21] )
		&& ((oealu_expected_prev[21] !== last_oealu_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[21] = oealu_expected_prev[21];
	end
	if (
		( oealu_expected_prev[22] !== 1'bx ) && ( oealu_prev[22] !== oealu_expected_prev[22] )
		&& ((oealu_expected_prev[22] !== last_oealu_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[22] = oealu_expected_prev[22];
	end
	if (
		( oealu_expected_prev[23] !== 1'bx ) && ( oealu_prev[23] !== oealu_expected_prev[23] )
		&& ((oealu_expected_prev[23] !== last_oealu_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[23] = oealu_expected_prev[23];
	end
	if (
		( oealu_expected_prev[24] !== 1'bx ) && ( oealu_prev[24] !== oealu_expected_prev[24] )
		&& ((oealu_expected_prev[24] !== last_oealu_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[24] = oealu_expected_prev[24];
	end
	if (
		( oealu_expected_prev[25] !== 1'bx ) && ( oealu_prev[25] !== oealu_expected_prev[25] )
		&& ((oealu_expected_prev[25] !== last_oealu_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[25] = oealu_expected_prev[25];
	end
	if (
		( oealu_expected_prev[26] !== 1'bx ) && ( oealu_prev[26] !== oealu_expected_prev[26] )
		&& ((oealu_expected_prev[26] !== last_oealu_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[26] = oealu_expected_prev[26];
	end
	if (
		( oealu_expected_prev[27] !== 1'bx ) && ( oealu_prev[27] !== oealu_expected_prev[27] )
		&& ((oealu_expected_prev[27] !== last_oealu_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[27] = oealu_expected_prev[27];
	end
	if (
		( oealu_expected_prev[28] !== 1'bx ) && ( oealu_prev[28] !== oealu_expected_prev[28] )
		&& ((oealu_expected_prev[28] !== last_oealu_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[28] = oealu_expected_prev[28];
	end
	if (
		( oealu_expected_prev[29] !== 1'bx ) && ( oealu_prev[29] !== oealu_expected_prev[29] )
		&& ((oealu_expected_prev[29] !== last_oealu_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[29] = oealu_expected_prev[29];
	end
	if (
		( oealu_expected_prev[30] !== 1'bx ) && ( oealu_prev[30] !== oealu_expected_prev[30] )
		&& ((oealu_expected_prev[30] !== last_oealu_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[30] = oealu_expected_prev[30];
	end
	if (
		( oealu_expected_prev[31] !== 1'bx ) && ( oealu_prev[31] !== oealu_expected_prev[31] )
		&& ((oealu_expected_prev[31] !== last_oealu_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oealu[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oealu_expected_prev);
		$display ("     Real value = %b", oealu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oealu_exp[31] = oealu_expected_prev[31];
	end
	if (
		( oins_expected_prev[0] !== 1'bx ) && ( oins_prev[0] !== oins_expected_prev[0] )
		&& ((oins_expected_prev[0] !== last_oins_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[0] = oins_expected_prev[0];
	end
	if (
		( oins_expected_prev[1] !== 1'bx ) && ( oins_prev[1] !== oins_expected_prev[1] )
		&& ((oins_expected_prev[1] !== last_oins_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[1] = oins_expected_prev[1];
	end
	if (
		( oins_expected_prev[2] !== 1'bx ) && ( oins_prev[2] !== oins_expected_prev[2] )
		&& ((oins_expected_prev[2] !== last_oins_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[2] = oins_expected_prev[2];
	end
	if (
		( oins_expected_prev[3] !== 1'bx ) && ( oins_prev[3] !== oins_expected_prev[3] )
		&& ((oins_expected_prev[3] !== last_oins_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[3] = oins_expected_prev[3];
	end
	if (
		( oins_expected_prev[4] !== 1'bx ) && ( oins_prev[4] !== oins_expected_prev[4] )
		&& ((oins_expected_prev[4] !== last_oins_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[4] = oins_expected_prev[4];
	end
	if (
		( oins_expected_prev[5] !== 1'bx ) && ( oins_prev[5] !== oins_expected_prev[5] )
		&& ((oins_expected_prev[5] !== last_oins_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[5] = oins_expected_prev[5];
	end
	if (
		( oins_expected_prev[6] !== 1'bx ) && ( oins_prev[6] !== oins_expected_prev[6] )
		&& ((oins_expected_prev[6] !== last_oins_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[6] = oins_expected_prev[6];
	end
	if (
		( oins_expected_prev[7] !== 1'bx ) && ( oins_prev[7] !== oins_expected_prev[7] )
		&& ((oins_expected_prev[7] !== last_oins_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[7] = oins_expected_prev[7];
	end
	if (
		( oins_expected_prev[8] !== 1'bx ) && ( oins_prev[8] !== oins_expected_prev[8] )
		&& ((oins_expected_prev[8] !== last_oins_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[8] = oins_expected_prev[8];
	end
	if (
		( oins_expected_prev[9] !== 1'bx ) && ( oins_prev[9] !== oins_expected_prev[9] )
		&& ((oins_expected_prev[9] !== last_oins_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[9] = oins_expected_prev[9];
	end
	if (
		( oins_expected_prev[10] !== 1'bx ) && ( oins_prev[10] !== oins_expected_prev[10] )
		&& ((oins_expected_prev[10] !== last_oins_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[10] = oins_expected_prev[10];
	end
	if (
		( oins_expected_prev[11] !== 1'bx ) && ( oins_prev[11] !== oins_expected_prev[11] )
		&& ((oins_expected_prev[11] !== last_oins_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[11] = oins_expected_prev[11];
	end
	if (
		( oins_expected_prev[12] !== 1'bx ) && ( oins_prev[12] !== oins_expected_prev[12] )
		&& ((oins_expected_prev[12] !== last_oins_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[12] = oins_expected_prev[12];
	end
	if (
		( oins_expected_prev[13] !== 1'bx ) && ( oins_prev[13] !== oins_expected_prev[13] )
		&& ((oins_expected_prev[13] !== last_oins_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[13] = oins_expected_prev[13];
	end
	if (
		( oins_expected_prev[14] !== 1'bx ) && ( oins_prev[14] !== oins_expected_prev[14] )
		&& ((oins_expected_prev[14] !== last_oins_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[14] = oins_expected_prev[14];
	end
	if (
		( oins_expected_prev[15] !== 1'bx ) && ( oins_prev[15] !== oins_expected_prev[15] )
		&& ((oins_expected_prev[15] !== last_oins_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[15] = oins_expected_prev[15];
	end
	if (
		( oins_expected_prev[16] !== 1'bx ) && ( oins_prev[16] !== oins_expected_prev[16] )
		&& ((oins_expected_prev[16] !== last_oins_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[16] = oins_expected_prev[16];
	end
	if (
		( oins_expected_prev[17] !== 1'bx ) && ( oins_prev[17] !== oins_expected_prev[17] )
		&& ((oins_expected_prev[17] !== last_oins_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[17] = oins_expected_prev[17];
	end
	if (
		( oins_expected_prev[18] !== 1'bx ) && ( oins_prev[18] !== oins_expected_prev[18] )
		&& ((oins_expected_prev[18] !== last_oins_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[18] = oins_expected_prev[18];
	end
	if (
		( oins_expected_prev[19] !== 1'bx ) && ( oins_prev[19] !== oins_expected_prev[19] )
		&& ((oins_expected_prev[19] !== last_oins_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[19] = oins_expected_prev[19];
	end
	if (
		( oins_expected_prev[20] !== 1'bx ) && ( oins_prev[20] !== oins_expected_prev[20] )
		&& ((oins_expected_prev[20] !== last_oins_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[20] = oins_expected_prev[20];
	end
	if (
		( oins_expected_prev[21] !== 1'bx ) && ( oins_prev[21] !== oins_expected_prev[21] )
		&& ((oins_expected_prev[21] !== last_oins_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[21] = oins_expected_prev[21];
	end
	if (
		( oins_expected_prev[22] !== 1'bx ) && ( oins_prev[22] !== oins_expected_prev[22] )
		&& ((oins_expected_prev[22] !== last_oins_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[22] = oins_expected_prev[22];
	end
	if (
		( oins_expected_prev[23] !== 1'bx ) && ( oins_prev[23] !== oins_expected_prev[23] )
		&& ((oins_expected_prev[23] !== last_oins_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[23] = oins_expected_prev[23];
	end
	if (
		( oins_expected_prev[24] !== 1'bx ) && ( oins_prev[24] !== oins_expected_prev[24] )
		&& ((oins_expected_prev[24] !== last_oins_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[24] = oins_expected_prev[24];
	end
	if (
		( oins_expected_prev[25] !== 1'bx ) && ( oins_prev[25] !== oins_expected_prev[25] )
		&& ((oins_expected_prev[25] !== last_oins_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[25] = oins_expected_prev[25];
	end
	if (
		( oins_expected_prev[26] !== 1'bx ) && ( oins_prev[26] !== oins_expected_prev[26] )
		&& ((oins_expected_prev[26] !== last_oins_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[26] = oins_expected_prev[26];
	end
	if (
		( oins_expected_prev[27] !== 1'bx ) && ( oins_prev[27] !== oins_expected_prev[27] )
		&& ((oins_expected_prev[27] !== last_oins_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[27] = oins_expected_prev[27];
	end
	if (
		( oins_expected_prev[28] !== 1'bx ) && ( oins_prev[28] !== oins_expected_prev[28] )
		&& ((oins_expected_prev[28] !== last_oins_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[28] = oins_expected_prev[28];
	end
	if (
		( oins_expected_prev[29] !== 1'bx ) && ( oins_prev[29] !== oins_expected_prev[29] )
		&& ((oins_expected_prev[29] !== last_oins_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[29] = oins_expected_prev[29];
	end
	if (
		( oins_expected_prev[30] !== 1'bx ) && ( oins_prev[30] !== oins_expected_prev[30] )
		&& ((oins_expected_prev[30] !== last_oins_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[30] = oins_expected_prev[30];
	end
	if (
		( oins_expected_prev[31] !== 1'bx ) && ( oins_prev[31] !== oins_expected_prev[31] )
		&& ((oins_expected_prev[31] !== last_oins_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oins[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oins_expected_prev);
		$display ("     Real value = %b", oins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oins_exp[31] = oins_expected_prev[31];
	end
	if (
		( oinst_expected_prev[0] !== 1'bx ) && ( oinst_prev[0] !== oinst_expected_prev[0] )
		&& ((oinst_expected_prev[0] !== last_oinst_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[0] = oinst_expected_prev[0];
	end
	if (
		( oinst_expected_prev[1] !== 1'bx ) && ( oinst_prev[1] !== oinst_expected_prev[1] )
		&& ((oinst_expected_prev[1] !== last_oinst_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[1] = oinst_expected_prev[1];
	end
	if (
		( oinst_expected_prev[2] !== 1'bx ) && ( oinst_prev[2] !== oinst_expected_prev[2] )
		&& ((oinst_expected_prev[2] !== last_oinst_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[2] = oinst_expected_prev[2];
	end
	if (
		( oinst_expected_prev[3] !== 1'bx ) && ( oinst_prev[3] !== oinst_expected_prev[3] )
		&& ((oinst_expected_prev[3] !== last_oinst_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[3] = oinst_expected_prev[3];
	end
	if (
		( oinst_expected_prev[4] !== 1'bx ) && ( oinst_prev[4] !== oinst_expected_prev[4] )
		&& ((oinst_expected_prev[4] !== last_oinst_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[4] = oinst_expected_prev[4];
	end
	if (
		( oinst_expected_prev[5] !== 1'bx ) && ( oinst_prev[5] !== oinst_expected_prev[5] )
		&& ((oinst_expected_prev[5] !== last_oinst_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[5] = oinst_expected_prev[5];
	end
	if (
		( oinst_expected_prev[6] !== 1'bx ) && ( oinst_prev[6] !== oinst_expected_prev[6] )
		&& ((oinst_expected_prev[6] !== last_oinst_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[6] = oinst_expected_prev[6];
	end
	if (
		( oinst_expected_prev[7] !== 1'bx ) && ( oinst_prev[7] !== oinst_expected_prev[7] )
		&& ((oinst_expected_prev[7] !== last_oinst_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[7] = oinst_expected_prev[7];
	end
	if (
		( oinst_expected_prev[8] !== 1'bx ) && ( oinst_prev[8] !== oinst_expected_prev[8] )
		&& ((oinst_expected_prev[8] !== last_oinst_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[8] = oinst_expected_prev[8];
	end
	if (
		( oinst_expected_prev[9] !== 1'bx ) && ( oinst_prev[9] !== oinst_expected_prev[9] )
		&& ((oinst_expected_prev[9] !== last_oinst_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[9] = oinst_expected_prev[9];
	end
	if (
		( oinst_expected_prev[10] !== 1'bx ) && ( oinst_prev[10] !== oinst_expected_prev[10] )
		&& ((oinst_expected_prev[10] !== last_oinst_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[10] = oinst_expected_prev[10];
	end
	if (
		( oinst_expected_prev[11] !== 1'bx ) && ( oinst_prev[11] !== oinst_expected_prev[11] )
		&& ((oinst_expected_prev[11] !== last_oinst_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[11] = oinst_expected_prev[11];
	end
	if (
		( oinst_expected_prev[12] !== 1'bx ) && ( oinst_prev[12] !== oinst_expected_prev[12] )
		&& ((oinst_expected_prev[12] !== last_oinst_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[12] = oinst_expected_prev[12];
	end
	if (
		( oinst_expected_prev[13] !== 1'bx ) && ( oinst_prev[13] !== oinst_expected_prev[13] )
		&& ((oinst_expected_prev[13] !== last_oinst_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[13] = oinst_expected_prev[13];
	end
	if (
		( oinst_expected_prev[14] !== 1'bx ) && ( oinst_prev[14] !== oinst_expected_prev[14] )
		&& ((oinst_expected_prev[14] !== last_oinst_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[14] = oinst_expected_prev[14];
	end
	if (
		( oinst_expected_prev[15] !== 1'bx ) && ( oinst_prev[15] !== oinst_expected_prev[15] )
		&& ((oinst_expected_prev[15] !== last_oinst_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[15] = oinst_expected_prev[15];
	end
	if (
		( oinst_expected_prev[16] !== 1'bx ) && ( oinst_prev[16] !== oinst_expected_prev[16] )
		&& ((oinst_expected_prev[16] !== last_oinst_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[16] = oinst_expected_prev[16];
	end
	if (
		( oinst_expected_prev[17] !== 1'bx ) && ( oinst_prev[17] !== oinst_expected_prev[17] )
		&& ((oinst_expected_prev[17] !== last_oinst_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[17] = oinst_expected_prev[17];
	end
	if (
		( oinst_expected_prev[18] !== 1'bx ) && ( oinst_prev[18] !== oinst_expected_prev[18] )
		&& ((oinst_expected_prev[18] !== last_oinst_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[18] = oinst_expected_prev[18];
	end
	if (
		( oinst_expected_prev[19] !== 1'bx ) && ( oinst_prev[19] !== oinst_expected_prev[19] )
		&& ((oinst_expected_prev[19] !== last_oinst_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[19] = oinst_expected_prev[19];
	end
	if (
		( oinst_expected_prev[20] !== 1'bx ) && ( oinst_prev[20] !== oinst_expected_prev[20] )
		&& ((oinst_expected_prev[20] !== last_oinst_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[20] = oinst_expected_prev[20];
	end
	if (
		( oinst_expected_prev[21] !== 1'bx ) && ( oinst_prev[21] !== oinst_expected_prev[21] )
		&& ((oinst_expected_prev[21] !== last_oinst_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[21] = oinst_expected_prev[21];
	end
	if (
		( oinst_expected_prev[22] !== 1'bx ) && ( oinst_prev[22] !== oinst_expected_prev[22] )
		&& ((oinst_expected_prev[22] !== last_oinst_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[22] = oinst_expected_prev[22];
	end
	if (
		( oinst_expected_prev[23] !== 1'bx ) && ( oinst_prev[23] !== oinst_expected_prev[23] )
		&& ((oinst_expected_prev[23] !== last_oinst_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[23] = oinst_expected_prev[23];
	end
	if (
		( oinst_expected_prev[24] !== 1'bx ) && ( oinst_prev[24] !== oinst_expected_prev[24] )
		&& ((oinst_expected_prev[24] !== last_oinst_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[24] = oinst_expected_prev[24];
	end
	if (
		( oinst_expected_prev[25] !== 1'bx ) && ( oinst_prev[25] !== oinst_expected_prev[25] )
		&& ((oinst_expected_prev[25] !== last_oinst_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[25] = oinst_expected_prev[25];
	end
	if (
		( oinst_expected_prev[26] !== 1'bx ) && ( oinst_prev[26] !== oinst_expected_prev[26] )
		&& ((oinst_expected_prev[26] !== last_oinst_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[26] = oinst_expected_prev[26];
	end
	if (
		( oinst_expected_prev[27] !== 1'bx ) && ( oinst_prev[27] !== oinst_expected_prev[27] )
		&& ((oinst_expected_prev[27] !== last_oinst_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[27] = oinst_expected_prev[27];
	end
	if (
		( oinst_expected_prev[28] !== 1'bx ) && ( oinst_prev[28] !== oinst_expected_prev[28] )
		&& ((oinst_expected_prev[28] !== last_oinst_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[28] = oinst_expected_prev[28];
	end
	if (
		( oinst_expected_prev[29] !== 1'bx ) && ( oinst_prev[29] !== oinst_expected_prev[29] )
		&& ((oinst_expected_prev[29] !== last_oinst_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[29] = oinst_expected_prev[29];
	end
	if (
		( oinst_expected_prev[30] !== 1'bx ) && ( oinst_prev[30] !== oinst_expected_prev[30] )
		&& ((oinst_expected_prev[30] !== last_oinst_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[30] = oinst_expected_prev[30];
	end
	if (
		( oinst_expected_prev[31] !== 1'bx ) && ( oinst_prev[31] !== oinst_expected_prev[31] )
		&& ((oinst_expected_prev[31] !== last_oinst_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oinst[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oinst_expected_prev);
		$display ("     Real value = %b", oinst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oinst_exp[31] = oinst_expected_prev[31];
	end
	if (
		( omalu_expected_prev[0] !== 1'bx ) && ( omalu_prev[0] !== omalu_expected_prev[0] )
		&& ((omalu_expected_prev[0] !== last_omalu_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[0] = omalu_expected_prev[0];
	end
	if (
		( omalu_expected_prev[1] !== 1'bx ) && ( omalu_prev[1] !== omalu_expected_prev[1] )
		&& ((omalu_expected_prev[1] !== last_omalu_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[1] = omalu_expected_prev[1];
	end
	if (
		( omalu_expected_prev[2] !== 1'bx ) && ( omalu_prev[2] !== omalu_expected_prev[2] )
		&& ((omalu_expected_prev[2] !== last_omalu_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[2] = omalu_expected_prev[2];
	end
	if (
		( omalu_expected_prev[3] !== 1'bx ) && ( omalu_prev[3] !== omalu_expected_prev[3] )
		&& ((omalu_expected_prev[3] !== last_omalu_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[3] = omalu_expected_prev[3];
	end
	if (
		( omalu_expected_prev[4] !== 1'bx ) && ( omalu_prev[4] !== omalu_expected_prev[4] )
		&& ((omalu_expected_prev[4] !== last_omalu_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[4] = omalu_expected_prev[4];
	end
	if (
		( omalu_expected_prev[5] !== 1'bx ) && ( omalu_prev[5] !== omalu_expected_prev[5] )
		&& ((omalu_expected_prev[5] !== last_omalu_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[5] = omalu_expected_prev[5];
	end
	if (
		( omalu_expected_prev[6] !== 1'bx ) && ( omalu_prev[6] !== omalu_expected_prev[6] )
		&& ((omalu_expected_prev[6] !== last_omalu_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[6] = omalu_expected_prev[6];
	end
	if (
		( omalu_expected_prev[7] !== 1'bx ) && ( omalu_prev[7] !== omalu_expected_prev[7] )
		&& ((omalu_expected_prev[7] !== last_omalu_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[7] = omalu_expected_prev[7];
	end
	if (
		( omalu_expected_prev[8] !== 1'bx ) && ( omalu_prev[8] !== omalu_expected_prev[8] )
		&& ((omalu_expected_prev[8] !== last_omalu_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[8] = omalu_expected_prev[8];
	end
	if (
		( omalu_expected_prev[9] !== 1'bx ) && ( omalu_prev[9] !== omalu_expected_prev[9] )
		&& ((omalu_expected_prev[9] !== last_omalu_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[9] = omalu_expected_prev[9];
	end
	if (
		( omalu_expected_prev[10] !== 1'bx ) && ( omalu_prev[10] !== omalu_expected_prev[10] )
		&& ((omalu_expected_prev[10] !== last_omalu_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[10] = omalu_expected_prev[10];
	end
	if (
		( omalu_expected_prev[11] !== 1'bx ) && ( omalu_prev[11] !== omalu_expected_prev[11] )
		&& ((omalu_expected_prev[11] !== last_omalu_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[11] = omalu_expected_prev[11];
	end
	if (
		( omalu_expected_prev[12] !== 1'bx ) && ( omalu_prev[12] !== omalu_expected_prev[12] )
		&& ((omalu_expected_prev[12] !== last_omalu_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[12] = omalu_expected_prev[12];
	end
	if (
		( omalu_expected_prev[13] !== 1'bx ) && ( omalu_prev[13] !== omalu_expected_prev[13] )
		&& ((omalu_expected_prev[13] !== last_omalu_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[13] = omalu_expected_prev[13];
	end
	if (
		( omalu_expected_prev[14] !== 1'bx ) && ( omalu_prev[14] !== omalu_expected_prev[14] )
		&& ((omalu_expected_prev[14] !== last_omalu_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[14] = omalu_expected_prev[14];
	end
	if (
		( omalu_expected_prev[15] !== 1'bx ) && ( omalu_prev[15] !== omalu_expected_prev[15] )
		&& ((omalu_expected_prev[15] !== last_omalu_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[15] = omalu_expected_prev[15];
	end
	if (
		( omalu_expected_prev[16] !== 1'bx ) && ( omalu_prev[16] !== omalu_expected_prev[16] )
		&& ((omalu_expected_prev[16] !== last_omalu_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[16] = omalu_expected_prev[16];
	end
	if (
		( omalu_expected_prev[17] !== 1'bx ) && ( omalu_prev[17] !== omalu_expected_prev[17] )
		&& ((omalu_expected_prev[17] !== last_omalu_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[17] = omalu_expected_prev[17];
	end
	if (
		( omalu_expected_prev[18] !== 1'bx ) && ( omalu_prev[18] !== omalu_expected_prev[18] )
		&& ((omalu_expected_prev[18] !== last_omalu_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[18] = omalu_expected_prev[18];
	end
	if (
		( omalu_expected_prev[19] !== 1'bx ) && ( omalu_prev[19] !== omalu_expected_prev[19] )
		&& ((omalu_expected_prev[19] !== last_omalu_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[19] = omalu_expected_prev[19];
	end
	if (
		( omalu_expected_prev[20] !== 1'bx ) && ( omalu_prev[20] !== omalu_expected_prev[20] )
		&& ((omalu_expected_prev[20] !== last_omalu_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[20] = omalu_expected_prev[20];
	end
	if (
		( omalu_expected_prev[21] !== 1'bx ) && ( omalu_prev[21] !== omalu_expected_prev[21] )
		&& ((omalu_expected_prev[21] !== last_omalu_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[21] = omalu_expected_prev[21];
	end
	if (
		( omalu_expected_prev[22] !== 1'bx ) && ( omalu_prev[22] !== omalu_expected_prev[22] )
		&& ((omalu_expected_prev[22] !== last_omalu_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[22] = omalu_expected_prev[22];
	end
	if (
		( omalu_expected_prev[23] !== 1'bx ) && ( omalu_prev[23] !== omalu_expected_prev[23] )
		&& ((omalu_expected_prev[23] !== last_omalu_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[23] = omalu_expected_prev[23];
	end
	if (
		( omalu_expected_prev[24] !== 1'bx ) && ( omalu_prev[24] !== omalu_expected_prev[24] )
		&& ((omalu_expected_prev[24] !== last_omalu_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[24] = omalu_expected_prev[24];
	end
	if (
		( omalu_expected_prev[25] !== 1'bx ) && ( omalu_prev[25] !== omalu_expected_prev[25] )
		&& ((omalu_expected_prev[25] !== last_omalu_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[25] = omalu_expected_prev[25];
	end
	if (
		( omalu_expected_prev[26] !== 1'bx ) && ( omalu_prev[26] !== omalu_expected_prev[26] )
		&& ((omalu_expected_prev[26] !== last_omalu_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[26] = omalu_expected_prev[26];
	end
	if (
		( omalu_expected_prev[27] !== 1'bx ) && ( omalu_prev[27] !== omalu_expected_prev[27] )
		&& ((omalu_expected_prev[27] !== last_omalu_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[27] = omalu_expected_prev[27];
	end
	if (
		( omalu_expected_prev[28] !== 1'bx ) && ( omalu_prev[28] !== omalu_expected_prev[28] )
		&& ((omalu_expected_prev[28] !== last_omalu_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[28] = omalu_expected_prev[28];
	end
	if (
		( omalu_expected_prev[29] !== 1'bx ) && ( omalu_prev[29] !== omalu_expected_prev[29] )
		&& ((omalu_expected_prev[29] !== last_omalu_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[29] = omalu_expected_prev[29];
	end
	if (
		( omalu_expected_prev[30] !== 1'bx ) && ( omalu_prev[30] !== omalu_expected_prev[30] )
		&& ((omalu_expected_prev[30] !== last_omalu_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[30] = omalu_expected_prev[30];
	end
	if (
		( omalu_expected_prev[31] !== 1'bx ) && ( omalu_prev[31] !== omalu_expected_prev[31] )
		&& ((omalu_expected_prev[31] !== last_omalu_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port omalu[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", omalu_expected_prev);
		$display ("     Real value = %b", omalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_omalu_exp[31] = omalu_expected_prev[31];
	end
	if (
		( onpc_expected_prev[0] !== 1'bx ) && ( onpc_prev[0] !== onpc_expected_prev[0] )
		&& ((onpc_expected_prev[0] !== last_onpc_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[0] = onpc_expected_prev[0];
	end
	if (
		( onpc_expected_prev[1] !== 1'bx ) && ( onpc_prev[1] !== onpc_expected_prev[1] )
		&& ((onpc_expected_prev[1] !== last_onpc_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[1] = onpc_expected_prev[1];
	end
	if (
		( onpc_expected_prev[2] !== 1'bx ) && ( onpc_prev[2] !== onpc_expected_prev[2] )
		&& ((onpc_expected_prev[2] !== last_onpc_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[2] = onpc_expected_prev[2];
	end
	if (
		( onpc_expected_prev[3] !== 1'bx ) && ( onpc_prev[3] !== onpc_expected_prev[3] )
		&& ((onpc_expected_prev[3] !== last_onpc_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[3] = onpc_expected_prev[3];
	end
	if (
		( onpc_expected_prev[4] !== 1'bx ) && ( onpc_prev[4] !== onpc_expected_prev[4] )
		&& ((onpc_expected_prev[4] !== last_onpc_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[4] = onpc_expected_prev[4];
	end
	if (
		( onpc_expected_prev[5] !== 1'bx ) && ( onpc_prev[5] !== onpc_expected_prev[5] )
		&& ((onpc_expected_prev[5] !== last_onpc_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[5] = onpc_expected_prev[5];
	end
	if (
		( onpc_expected_prev[6] !== 1'bx ) && ( onpc_prev[6] !== onpc_expected_prev[6] )
		&& ((onpc_expected_prev[6] !== last_onpc_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[6] = onpc_expected_prev[6];
	end
	if (
		( onpc_expected_prev[7] !== 1'bx ) && ( onpc_prev[7] !== onpc_expected_prev[7] )
		&& ((onpc_expected_prev[7] !== last_onpc_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[7] = onpc_expected_prev[7];
	end
	if (
		( onpc_expected_prev[8] !== 1'bx ) && ( onpc_prev[8] !== onpc_expected_prev[8] )
		&& ((onpc_expected_prev[8] !== last_onpc_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[8] = onpc_expected_prev[8];
	end
	if (
		( onpc_expected_prev[9] !== 1'bx ) && ( onpc_prev[9] !== onpc_expected_prev[9] )
		&& ((onpc_expected_prev[9] !== last_onpc_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[9] = onpc_expected_prev[9];
	end
	if (
		( onpc_expected_prev[10] !== 1'bx ) && ( onpc_prev[10] !== onpc_expected_prev[10] )
		&& ((onpc_expected_prev[10] !== last_onpc_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[10] = onpc_expected_prev[10];
	end
	if (
		( onpc_expected_prev[11] !== 1'bx ) && ( onpc_prev[11] !== onpc_expected_prev[11] )
		&& ((onpc_expected_prev[11] !== last_onpc_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[11] = onpc_expected_prev[11];
	end
	if (
		( onpc_expected_prev[12] !== 1'bx ) && ( onpc_prev[12] !== onpc_expected_prev[12] )
		&& ((onpc_expected_prev[12] !== last_onpc_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[12] = onpc_expected_prev[12];
	end
	if (
		( onpc_expected_prev[13] !== 1'bx ) && ( onpc_prev[13] !== onpc_expected_prev[13] )
		&& ((onpc_expected_prev[13] !== last_onpc_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[13] = onpc_expected_prev[13];
	end
	if (
		( onpc_expected_prev[14] !== 1'bx ) && ( onpc_prev[14] !== onpc_expected_prev[14] )
		&& ((onpc_expected_prev[14] !== last_onpc_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[14] = onpc_expected_prev[14];
	end
	if (
		( onpc_expected_prev[15] !== 1'bx ) && ( onpc_prev[15] !== onpc_expected_prev[15] )
		&& ((onpc_expected_prev[15] !== last_onpc_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[15] = onpc_expected_prev[15];
	end
	if (
		( onpc_expected_prev[16] !== 1'bx ) && ( onpc_prev[16] !== onpc_expected_prev[16] )
		&& ((onpc_expected_prev[16] !== last_onpc_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[16] = onpc_expected_prev[16];
	end
	if (
		( onpc_expected_prev[17] !== 1'bx ) && ( onpc_prev[17] !== onpc_expected_prev[17] )
		&& ((onpc_expected_prev[17] !== last_onpc_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[17] = onpc_expected_prev[17];
	end
	if (
		( onpc_expected_prev[18] !== 1'bx ) && ( onpc_prev[18] !== onpc_expected_prev[18] )
		&& ((onpc_expected_prev[18] !== last_onpc_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[18] = onpc_expected_prev[18];
	end
	if (
		( onpc_expected_prev[19] !== 1'bx ) && ( onpc_prev[19] !== onpc_expected_prev[19] )
		&& ((onpc_expected_prev[19] !== last_onpc_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[19] = onpc_expected_prev[19];
	end
	if (
		( onpc_expected_prev[20] !== 1'bx ) && ( onpc_prev[20] !== onpc_expected_prev[20] )
		&& ((onpc_expected_prev[20] !== last_onpc_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[20] = onpc_expected_prev[20];
	end
	if (
		( onpc_expected_prev[21] !== 1'bx ) && ( onpc_prev[21] !== onpc_expected_prev[21] )
		&& ((onpc_expected_prev[21] !== last_onpc_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[21] = onpc_expected_prev[21];
	end
	if (
		( onpc_expected_prev[22] !== 1'bx ) && ( onpc_prev[22] !== onpc_expected_prev[22] )
		&& ((onpc_expected_prev[22] !== last_onpc_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[22] = onpc_expected_prev[22];
	end
	if (
		( onpc_expected_prev[23] !== 1'bx ) && ( onpc_prev[23] !== onpc_expected_prev[23] )
		&& ((onpc_expected_prev[23] !== last_onpc_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[23] = onpc_expected_prev[23];
	end
	if (
		( onpc_expected_prev[24] !== 1'bx ) && ( onpc_prev[24] !== onpc_expected_prev[24] )
		&& ((onpc_expected_prev[24] !== last_onpc_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[24] = onpc_expected_prev[24];
	end
	if (
		( onpc_expected_prev[25] !== 1'bx ) && ( onpc_prev[25] !== onpc_expected_prev[25] )
		&& ((onpc_expected_prev[25] !== last_onpc_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[25] = onpc_expected_prev[25];
	end
	if (
		( onpc_expected_prev[26] !== 1'bx ) && ( onpc_prev[26] !== onpc_expected_prev[26] )
		&& ((onpc_expected_prev[26] !== last_onpc_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[26] = onpc_expected_prev[26];
	end
	if (
		( onpc_expected_prev[27] !== 1'bx ) && ( onpc_prev[27] !== onpc_expected_prev[27] )
		&& ((onpc_expected_prev[27] !== last_onpc_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[27] = onpc_expected_prev[27];
	end
	if (
		( onpc_expected_prev[28] !== 1'bx ) && ( onpc_prev[28] !== onpc_expected_prev[28] )
		&& ((onpc_expected_prev[28] !== last_onpc_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[28] = onpc_expected_prev[28];
	end
	if (
		( onpc_expected_prev[29] !== 1'bx ) && ( onpc_prev[29] !== onpc_expected_prev[29] )
		&& ((onpc_expected_prev[29] !== last_onpc_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[29] = onpc_expected_prev[29];
	end
	if (
		( onpc_expected_prev[30] !== 1'bx ) && ( onpc_prev[30] !== onpc_expected_prev[30] )
		&& ((onpc_expected_prev[30] !== last_onpc_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[30] = onpc_expected_prev[30];
	end
	if (
		( onpc_expected_prev[31] !== 1'bx ) && ( onpc_prev[31] !== onpc_expected_prev[31] )
		&& ((onpc_expected_prev[31] !== last_onpc_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onpc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onpc_expected_prev);
		$display ("     Real value = %b", onpc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_onpc_exp[31] = onpc_expected_prev[31];
	end
	if (
		( opc_expected_prev[0] !== 1'bx ) && ( opc_prev[0] !== opc_expected_prev[0] )
		&& ((opc_expected_prev[0] !== last_opc_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[0] = opc_expected_prev[0];
	end
	if (
		( opc_expected_prev[1] !== 1'bx ) && ( opc_prev[1] !== opc_expected_prev[1] )
		&& ((opc_expected_prev[1] !== last_opc_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[1] = opc_expected_prev[1];
	end
	if (
		( opc_expected_prev[2] !== 1'bx ) && ( opc_prev[2] !== opc_expected_prev[2] )
		&& ((opc_expected_prev[2] !== last_opc_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[2] = opc_expected_prev[2];
	end
	if (
		( opc_expected_prev[3] !== 1'bx ) && ( opc_prev[3] !== opc_expected_prev[3] )
		&& ((opc_expected_prev[3] !== last_opc_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[3] = opc_expected_prev[3];
	end
	if (
		( opc_expected_prev[4] !== 1'bx ) && ( opc_prev[4] !== opc_expected_prev[4] )
		&& ((opc_expected_prev[4] !== last_opc_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[4] = opc_expected_prev[4];
	end
	if (
		( opc_expected_prev[5] !== 1'bx ) && ( opc_prev[5] !== opc_expected_prev[5] )
		&& ((opc_expected_prev[5] !== last_opc_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[5] = opc_expected_prev[5];
	end
	if (
		( opc_expected_prev[6] !== 1'bx ) && ( opc_prev[6] !== opc_expected_prev[6] )
		&& ((opc_expected_prev[6] !== last_opc_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[6] = opc_expected_prev[6];
	end
	if (
		( opc_expected_prev[7] !== 1'bx ) && ( opc_prev[7] !== opc_expected_prev[7] )
		&& ((opc_expected_prev[7] !== last_opc_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[7] = opc_expected_prev[7];
	end
	if (
		( opc_expected_prev[8] !== 1'bx ) && ( opc_prev[8] !== opc_expected_prev[8] )
		&& ((opc_expected_prev[8] !== last_opc_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[8] = opc_expected_prev[8];
	end
	if (
		( opc_expected_prev[9] !== 1'bx ) && ( opc_prev[9] !== opc_expected_prev[9] )
		&& ((opc_expected_prev[9] !== last_opc_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[9] = opc_expected_prev[9];
	end
	if (
		( opc_expected_prev[10] !== 1'bx ) && ( opc_prev[10] !== opc_expected_prev[10] )
		&& ((opc_expected_prev[10] !== last_opc_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[10] = opc_expected_prev[10];
	end
	if (
		( opc_expected_prev[11] !== 1'bx ) && ( opc_prev[11] !== opc_expected_prev[11] )
		&& ((opc_expected_prev[11] !== last_opc_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[11] = opc_expected_prev[11];
	end
	if (
		( opc_expected_prev[12] !== 1'bx ) && ( opc_prev[12] !== opc_expected_prev[12] )
		&& ((opc_expected_prev[12] !== last_opc_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[12] = opc_expected_prev[12];
	end
	if (
		( opc_expected_prev[13] !== 1'bx ) && ( opc_prev[13] !== opc_expected_prev[13] )
		&& ((opc_expected_prev[13] !== last_opc_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[13] = opc_expected_prev[13];
	end
	if (
		( opc_expected_prev[14] !== 1'bx ) && ( opc_prev[14] !== opc_expected_prev[14] )
		&& ((opc_expected_prev[14] !== last_opc_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[14] = opc_expected_prev[14];
	end
	if (
		( opc_expected_prev[15] !== 1'bx ) && ( opc_prev[15] !== opc_expected_prev[15] )
		&& ((opc_expected_prev[15] !== last_opc_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[15] = opc_expected_prev[15];
	end
	if (
		( opc_expected_prev[16] !== 1'bx ) && ( opc_prev[16] !== opc_expected_prev[16] )
		&& ((opc_expected_prev[16] !== last_opc_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[16] = opc_expected_prev[16];
	end
	if (
		( opc_expected_prev[17] !== 1'bx ) && ( opc_prev[17] !== opc_expected_prev[17] )
		&& ((opc_expected_prev[17] !== last_opc_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[17] = opc_expected_prev[17];
	end
	if (
		( opc_expected_prev[18] !== 1'bx ) && ( opc_prev[18] !== opc_expected_prev[18] )
		&& ((opc_expected_prev[18] !== last_opc_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[18] = opc_expected_prev[18];
	end
	if (
		( opc_expected_prev[19] !== 1'bx ) && ( opc_prev[19] !== opc_expected_prev[19] )
		&& ((opc_expected_prev[19] !== last_opc_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[19] = opc_expected_prev[19];
	end
	if (
		( opc_expected_prev[20] !== 1'bx ) && ( opc_prev[20] !== opc_expected_prev[20] )
		&& ((opc_expected_prev[20] !== last_opc_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[20] = opc_expected_prev[20];
	end
	if (
		( opc_expected_prev[21] !== 1'bx ) && ( opc_prev[21] !== opc_expected_prev[21] )
		&& ((opc_expected_prev[21] !== last_opc_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[21] = opc_expected_prev[21];
	end
	if (
		( opc_expected_prev[22] !== 1'bx ) && ( opc_prev[22] !== opc_expected_prev[22] )
		&& ((opc_expected_prev[22] !== last_opc_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[22] = opc_expected_prev[22];
	end
	if (
		( opc_expected_prev[23] !== 1'bx ) && ( opc_prev[23] !== opc_expected_prev[23] )
		&& ((opc_expected_prev[23] !== last_opc_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[23] = opc_expected_prev[23];
	end
	if (
		( opc_expected_prev[24] !== 1'bx ) && ( opc_prev[24] !== opc_expected_prev[24] )
		&& ((opc_expected_prev[24] !== last_opc_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[24] = opc_expected_prev[24];
	end
	if (
		( opc_expected_prev[25] !== 1'bx ) && ( opc_prev[25] !== opc_expected_prev[25] )
		&& ((opc_expected_prev[25] !== last_opc_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[25] = opc_expected_prev[25];
	end
	if (
		( opc_expected_prev[26] !== 1'bx ) && ( opc_prev[26] !== opc_expected_prev[26] )
		&& ((opc_expected_prev[26] !== last_opc_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[26] = opc_expected_prev[26];
	end
	if (
		( opc_expected_prev[27] !== 1'bx ) && ( opc_prev[27] !== opc_expected_prev[27] )
		&& ((opc_expected_prev[27] !== last_opc_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[27] = opc_expected_prev[27];
	end
	if (
		( opc_expected_prev[28] !== 1'bx ) && ( opc_prev[28] !== opc_expected_prev[28] )
		&& ((opc_expected_prev[28] !== last_opc_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[28] = opc_expected_prev[28];
	end
	if (
		( opc_expected_prev[29] !== 1'bx ) && ( opc_prev[29] !== opc_expected_prev[29] )
		&& ((opc_expected_prev[29] !== last_opc_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[29] = opc_expected_prev[29];
	end
	if (
		( opc_expected_prev[30] !== 1'bx ) && ( opc_prev[30] !== opc_expected_prev[30] )
		&& ((opc_expected_prev[30] !== last_opc_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[30] = opc_expected_prev[30];
	end
	if (
		( opc_expected_prev[31] !== 1'bx ) && ( opc_prev[31] !== opc_expected_prev[31] )
		&& ((opc_expected_prev[31] !== last_opc_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opc_expected_prev);
		$display ("     Real value = %b", opc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opc_exp[31] = opc_expected_prev[31];
	end
	if (
		( out_port0_expected_prev[0] !== 1'bx ) && ( out_port0_prev[0] !== out_port0_expected_prev[0] )
		&& ((out_port0_expected_prev[0] !== last_out_port0_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[0] = out_port0_expected_prev[0];
	end
	if (
		( out_port0_expected_prev[1] !== 1'bx ) && ( out_port0_prev[1] !== out_port0_expected_prev[1] )
		&& ((out_port0_expected_prev[1] !== last_out_port0_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[1] = out_port0_expected_prev[1];
	end
	if (
		( out_port0_expected_prev[2] !== 1'bx ) && ( out_port0_prev[2] !== out_port0_expected_prev[2] )
		&& ((out_port0_expected_prev[2] !== last_out_port0_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[2] = out_port0_expected_prev[2];
	end
	if (
		( out_port0_expected_prev[3] !== 1'bx ) && ( out_port0_prev[3] !== out_port0_expected_prev[3] )
		&& ((out_port0_expected_prev[3] !== last_out_port0_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[3] = out_port0_expected_prev[3];
	end
	if (
		( out_port0_expected_prev[4] !== 1'bx ) && ( out_port0_prev[4] !== out_port0_expected_prev[4] )
		&& ((out_port0_expected_prev[4] !== last_out_port0_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[4] = out_port0_expected_prev[4];
	end
	if (
		( out_port0_expected_prev[5] !== 1'bx ) && ( out_port0_prev[5] !== out_port0_expected_prev[5] )
		&& ((out_port0_expected_prev[5] !== last_out_port0_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[5] = out_port0_expected_prev[5];
	end
	if (
		( out_port0_expected_prev[6] !== 1'bx ) && ( out_port0_prev[6] !== out_port0_expected_prev[6] )
		&& ((out_port0_expected_prev[6] !== last_out_port0_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[6] = out_port0_expected_prev[6];
	end
	if (
		( out_port0_expected_prev[7] !== 1'bx ) && ( out_port0_prev[7] !== out_port0_expected_prev[7] )
		&& ((out_port0_expected_prev[7] !== last_out_port0_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[7] = out_port0_expected_prev[7];
	end
	if (
		( out_port0_expected_prev[8] !== 1'bx ) && ( out_port0_prev[8] !== out_port0_expected_prev[8] )
		&& ((out_port0_expected_prev[8] !== last_out_port0_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[8] = out_port0_expected_prev[8];
	end
	if (
		( out_port0_expected_prev[9] !== 1'bx ) && ( out_port0_prev[9] !== out_port0_expected_prev[9] )
		&& ((out_port0_expected_prev[9] !== last_out_port0_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[9] = out_port0_expected_prev[9];
	end
	if (
		( out_port0_expected_prev[10] !== 1'bx ) && ( out_port0_prev[10] !== out_port0_expected_prev[10] )
		&& ((out_port0_expected_prev[10] !== last_out_port0_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[10] = out_port0_expected_prev[10];
	end
	if (
		( out_port0_expected_prev[11] !== 1'bx ) && ( out_port0_prev[11] !== out_port0_expected_prev[11] )
		&& ((out_port0_expected_prev[11] !== last_out_port0_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[11] = out_port0_expected_prev[11];
	end
	if (
		( out_port0_expected_prev[12] !== 1'bx ) && ( out_port0_prev[12] !== out_port0_expected_prev[12] )
		&& ((out_port0_expected_prev[12] !== last_out_port0_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[12] = out_port0_expected_prev[12];
	end
	if (
		( out_port0_expected_prev[13] !== 1'bx ) && ( out_port0_prev[13] !== out_port0_expected_prev[13] )
		&& ((out_port0_expected_prev[13] !== last_out_port0_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[13] = out_port0_expected_prev[13];
	end
	if (
		( out_port0_expected_prev[14] !== 1'bx ) && ( out_port0_prev[14] !== out_port0_expected_prev[14] )
		&& ((out_port0_expected_prev[14] !== last_out_port0_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[14] = out_port0_expected_prev[14];
	end
	if (
		( out_port0_expected_prev[15] !== 1'bx ) && ( out_port0_prev[15] !== out_port0_expected_prev[15] )
		&& ((out_port0_expected_prev[15] !== last_out_port0_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[15] = out_port0_expected_prev[15];
	end
	if (
		( out_port0_expected_prev[16] !== 1'bx ) && ( out_port0_prev[16] !== out_port0_expected_prev[16] )
		&& ((out_port0_expected_prev[16] !== last_out_port0_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[16] = out_port0_expected_prev[16];
	end
	if (
		( out_port0_expected_prev[17] !== 1'bx ) && ( out_port0_prev[17] !== out_port0_expected_prev[17] )
		&& ((out_port0_expected_prev[17] !== last_out_port0_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[17] = out_port0_expected_prev[17];
	end
	if (
		( out_port0_expected_prev[18] !== 1'bx ) && ( out_port0_prev[18] !== out_port0_expected_prev[18] )
		&& ((out_port0_expected_prev[18] !== last_out_port0_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[18] = out_port0_expected_prev[18];
	end
	if (
		( out_port0_expected_prev[19] !== 1'bx ) && ( out_port0_prev[19] !== out_port0_expected_prev[19] )
		&& ((out_port0_expected_prev[19] !== last_out_port0_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[19] = out_port0_expected_prev[19];
	end
	if (
		( out_port0_expected_prev[20] !== 1'bx ) && ( out_port0_prev[20] !== out_port0_expected_prev[20] )
		&& ((out_port0_expected_prev[20] !== last_out_port0_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[20] = out_port0_expected_prev[20];
	end
	if (
		( out_port0_expected_prev[21] !== 1'bx ) && ( out_port0_prev[21] !== out_port0_expected_prev[21] )
		&& ((out_port0_expected_prev[21] !== last_out_port0_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[21] = out_port0_expected_prev[21];
	end
	if (
		( out_port0_expected_prev[22] !== 1'bx ) && ( out_port0_prev[22] !== out_port0_expected_prev[22] )
		&& ((out_port0_expected_prev[22] !== last_out_port0_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[22] = out_port0_expected_prev[22];
	end
	if (
		( out_port0_expected_prev[23] !== 1'bx ) && ( out_port0_prev[23] !== out_port0_expected_prev[23] )
		&& ((out_port0_expected_prev[23] !== last_out_port0_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[23] = out_port0_expected_prev[23];
	end
	if (
		( out_port0_expected_prev[24] !== 1'bx ) && ( out_port0_prev[24] !== out_port0_expected_prev[24] )
		&& ((out_port0_expected_prev[24] !== last_out_port0_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[24] = out_port0_expected_prev[24];
	end
	if (
		( out_port0_expected_prev[25] !== 1'bx ) && ( out_port0_prev[25] !== out_port0_expected_prev[25] )
		&& ((out_port0_expected_prev[25] !== last_out_port0_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[25] = out_port0_expected_prev[25];
	end
	if (
		( out_port0_expected_prev[26] !== 1'bx ) && ( out_port0_prev[26] !== out_port0_expected_prev[26] )
		&& ((out_port0_expected_prev[26] !== last_out_port0_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[26] = out_port0_expected_prev[26];
	end
	if (
		( out_port0_expected_prev[27] !== 1'bx ) && ( out_port0_prev[27] !== out_port0_expected_prev[27] )
		&& ((out_port0_expected_prev[27] !== last_out_port0_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[27] = out_port0_expected_prev[27];
	end
	if (
		( out_port0_expected_prev[28] !== 1'bx ) && ( out_port0_prev[28] !== out_port0_expected_prev[28] )
		&& ((out_port0_expected_prev[28] !== last_out_port0_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[28] = out_port0_expected_prev[28];
	end
	if (
		( out_port0_expected_prev[29] !== 1'bx ) && ( out_port0_prev[29] !== out_port0_expected_prev[29] )
		&& ((out_port0_expected_prev[29] !== last_out_port0_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[29] = out_port0_expected_prev[29];
	end
	if (
		( out_port0_expected_prev[30] !== 1'bx ) && ( out_port0_prev[30] !== out_port0_expected_prev[30] )
		&& ((out_port0_expected_prev[30] !== last_out_port0_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[30] = out_port0_expected_prev[30];
	end
	if (
		( out_port0_expected_prev[31] !== 1'bx ) && ( out_port0_prev[31] !== out_port0_expected_prev[31] )
		&& ((out_port0_expected_prev[31] !== last_out_port0_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port0_expected_prev);
		$display ("     Real value = %b", out_port0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_port0_exp[31] = out_port0_expected_prev[31];
	end
	if (
		( out_port1_expected_prev[0] !== 1'bx ) && ( out_port1_prev[0] !== out_port1_expected_prev[0] )
		&& ((out_port1_expected_prev[0] !== last_out_port1_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[0] = out_port1_expected_prev[0];
	end
	if (
		( out_port1_expected_prev[1] !== 1'bx ) && ( out_port1_prev[1] !== out_port1_expected_prev[1] )
		&& ((out_port1_expected_prev[1] !== last_out_port1_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[1] = out_port1_expected_prev[1];
	end
	if (
		( out_port1_expected_prev[2] !== 1'bx ) && ( out_port1_prev[2] !== out_port1_expected_prev[2] )
		&& ((out_port1_expected_prev[2] !== last_out_port1_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[2] = out_port1_expected_prev[2];
	end
	if (
		( out_port1_expected_prev[3] !== 1'bx ) && ( out_port1_prev[3] !== out_port1_expected_prev[3] )
		&& ((out_port1_expected_prev[3] !== last_out_port1_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[3] = out_port1_expected_prev[3];
	end
	if (
		( out_port1_expected_prev[4] !== 1'bx ) && ( out_port1_prev[4] !== out_port1_expected_prev[4] )
		&& ((out_port1_expected_prev[4] !== last_out_port1_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[4] = out_port1_expected_prev[4];
	end
	if (
		( out_port1_expected_prev[5] !== 1'bx ) && ( out_port1_prev[5] !== out_port1_expected_prev[5] )
		&& ((out_port1_expected_prev[5] !== last_out_port1_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[5] = out_port1_expected_prev[5];
	end
	if (
		( out_port1_expected_prev[6] !== 1'bx ) && ( out_port1_prev[6] !== out_port1_expected_prev[6] )
		&& ((out_port1_expected_prev[6] !== last_out_port1_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[6] = out_port1_expected_prev[6];
	end
	if (
		( out_port1_expected_prev[7] !== 1'bx ) && ( out_port1_prev[7] !== out_port1_expected_prev[7] )
		&& ((out_port1_expected_prev[7] !== last_out_port1_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[7] = out_port1_expected_prev[7];
	end
	if (
		( out_port1_expected_prev[8] !== 1'bx ) && ( out_port1_prev[8] !== out_port1_expected_prev[8] )
		&& ((out_port1_expected_prev[8] !== last_out_port1_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[8] = out_port1_expected_prev[8];
	end
	if (
		( out_port1_expected_prev[9] !== 1'bx ) && ( out_port1_prev[9] !== out_port1_expected_prev[9] )
		&& ((out_port1_expected_prev[9] !== last_out_port1_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[9] = out_port1_expected_prev[9];
	end
	if (
		( out_port1_expected_prev[10] !== 1'bx ) && ( out_port1_prev[10] !== out_port1_expected_prev[10] )
		&& ((out_port1_expected_prev[10] !== last_out_port1_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[10] = out_port1_expected_prev[10];
	end
	if (
		( out_port1_expected_prev[11] !== 1'bx ) && ( out_port1_prev[11] !== out_port1_expected_prev[11] )
		&& ((out_port1_expected_prev[11] !== last_out_port1_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[11] = out_port1_expected_prev[11];
	end
	if (
		( out_port1_expected_prev[12] !== 1'bx ) && ( out_port1_prev[12] !== out_port1_expected_prev[12] )
		&& ((out_port1_expected_prev[12] !== last_out_port1_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[12] = out_port1_expected_prev[12];
	end
	if (
		( out_port1_expected_prev[13] !== 1'bx ) && ( out_port1_prev[13] !== out_port1_expected_prev[13] )
		&& ((out_port1_expected_prev[13] !== last_out_port1_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[13] = out_port1_expected_prev[13];
	end
	if (
		( out_port1_expected_prev[14] !== 1'bx ) && ( out_port1_prev[14] !== out_port1_expected_prev[14] )
		&& ((out_port1_expected_prev[14] !== last_out_port1_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[14] = out_port1_expected_prev[14];
	end
	if (
		( out_port1_expected_prev[15] !== 1'bx ) && ( out_port1_prev[15] !== out_port1_expected_prev[15] )
		&& ((out_port1_expected_prev[15] !== last_out_port1_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[15] = out_port1_expected_prev[15];
	end
	if (
		( out_port1_expected_prev[16] !== 1'bx ) && ( out_port1_prev[16] !== out_port1_expected_prev[16] )
		&& ((out_port1_expected_prev[16] !== last_out_port1_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[16] = out_port1_expected_prev[16];
	end
	if (
		( out_port1_expected_prev[17] !== 1'bx ) && ( out_port1_prev[17] !== out_port1_expected_prev[17] )
		&& ((out_port1_expected_prev[17] !== last_out_port1_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[17] = out_port1_expected_prev[17];
	end
	if (
		( out_port1_expected_prev[18] !== 1'bx ) && ( out_port1_prev[18] !== out_port1_expected_prev[18] )
		&& ((out_port1_expected_prev[18] !== last_out_port1_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[18] = out_port1_expected_prev[18];
	end
	if (
		( out_port1_expected_prev[19] !== 1'bx ) && ( out_port1_prev[19] !== out_port1_expected_prev[19] )
		&& ((out_port1_expected_prev[19] !== last_out_port1_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[19] = out_port1_expected_prev[19];
	end
	if (
		( out_port1_expected_prev[20] !== 1'bx ) && ( out_port1_prev[20] !== out_port1_expected_prev[20] )
		&& ((out_port1_expected_prev[20] !== last_out_port1_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[20] = out_port1_expected_prev[20];
	end
	if (
		( out_port1_expected_prev[21] !== 1'bx ) && ( out_port1_prev[21] !== out_port1_expected_prev[21] )
		&& ((out_port1_expected_prev[21] !== last_out_port1_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[21] = out_port1_expected_prev[21];
	end
	if (
		( out_port1_expected_prev[22] !== 1'bx ) && ( out_port1_prev[22] !== out_port1_expected_prev[22] )
		&& ((out_port1_expected_prev[22] !== last_out_port1_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[22] = out_port1_expected_prev[22];
	end
	if (
		( out_port1_expected_prev[23] !== 1'bx ) && ( out_port1_prev[23] !== out_port1_expected_prev[23] )
		&& ((out_port1_expected_prev[23] !== last_out_port1_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[23] = out_port1_expected_prev[23];
	end
	if (
		( out_port1_expected_prev[24] !== 1'bx ) && ( out_port1_prev[24] !== out_port1_expected_prev[24] )
		&& ((out_port1_expected_prev[24] !== last_out_port1_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[24] = out_port1_expected_prev[24];
	end
	if (
		( out_port1_expected_prev[25] !== 1'bx ) && ( out_port1_prev[25] !== out_port1_expected_prev[25] )
		&& ((out_port1_expected_prev[25] !== last_out_port1_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[25] = out_port1_expected_prev[25];
	end
	if (
		( out_port1_expected_prev[26] !== 1'bx ) && ( out_port1_prev[26] !== out_port1_expected_prev[26] )
		&& ((out_port1_expected_prev[26] !== last_out_port1_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[26] = out_port1_expected_prev[26];
	end
	if (
		( out_port1_expected_prev[27] !== 1'bx ) && ( out_port1_prev[27] !== out_port1_expected_prev[27] )
		&& ((out_port1_expected_prev[27] !== last_out_port1_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[27] = out_port1_expected_prev[27];
	end
	if (
		( out_port1_expected_prev[28] !== 1'bx ) && ( out_port1_prev[28] !== out_port1_expected_prev[28] )
		&& ((out_port1_expected_prev[28] !== last_out_port1_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[28] = out_port1_expected_prev[28];
	end
	if (
		( out_port1_expected_prev[29] !== 1'bx ) && ( out_port1_prev[29] !== out_port1_expected_prev[29] )
		&& ((out_port1_expected_prev[29] !== last_out_port1_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[29] = out_port1_expected_prev[29];
	end
	if (
		( out_port1_expected_prev[30] !== 1'bx ) && ( out_port1_prev[30] !== out_port1_expected_prev[30] )
		&& ((out_port1_expected_prev[30] !== last_out_port1_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[30] = out_port1_expected_prev[30];
	end
	if (
		( out_port1_expected_prev[31] !== 1'bx ) && ( out_port1_prev[31] !== out_port1_expected_prev[31] )
		&& ((out_port1_expected_prev[31] !== last_out_port1_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port1_expected_prev);
		$display ("     Real value = %b", out_port1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_port1_exp[31] = out_port1_expected_prev[31];
	end
	if (
		( out_port2_expected_prev[0] !== 1'bx ) && ( out_port2_prev[0] !== out_port2_expected_prev[0] )
		&& ((out_port2_expected_prev[0] !== last_out_port2_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[0] = out_port2_expected_prev[0];
	end
	if (
		( out_port2_expected_prev[1] !== 1'bx ) && ( out_port2_prev[1] !== out_port2_expected_prev[1] )
		&& ((out_port2_expected_prev[1] !== last_out_port2_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[1] = out_port2_expected_prev[1];
	end
	if (
		( out_port2_expected_prev[2] !== 1'bx ) && ( out_port2_prev[2] !== out_port2_expected_prev[2] )
		&& ((out_port2_expected_prev[2] !== last_out_port2_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[2] = out_port2_expected_prev[2];
	end
	if (
		( out_port2_expected_prev[3] !== 1'bx ) && ( out_port2_prev[3] !== out_port2_expected_prev[3] )
		&& ((out_port2_expected_prev[3] !== last_out_port2_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[3] = out_port2_expected_prev[3];
	end
	if (
		( out_port2_expected_prev[4] !== 1'bx ) && ( out_port2_prev[4] !== out_port2_expected_prev[4] )
		&& ((out_port2_expected_prev[4] !== last_out_port2_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[4] = out_port2_expected_prev[4];
	end
	if (
		( out_port2_expected_prev[5] !== 1'bx ) && ( out_port2_prev[5] !== out_port2_expected_prev[5] )
		&& ((out_port2_expected_prev[5] !== last_out_port2_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[5] = out_port2_expected_prev[5];
	end
	if (
		( out_port2_expected_prev[6] !== 1'bx ) && ( out_port2_prev[6] !== out_port2_expected_prev[6] )
		&& ((out_port2_expected_prev[6] !== last_out_port2_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[6] = out_port2_expected_prev[6];
	end
	if (
		( out_port2_expected_prev[7] !== 1'bx ) && ( out_port2_prev[7] !== out_port2_expected_prev[7] )
		&& ((out_port2_expected_prev[7] !== last_out_port2_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[7] = out_port2_expected_prev[7];
	end
	if (
		( out_port2_expected_prev[8] !== 1'bx ) && ( out_port2_prev[8] !== out_port2_expected_prev[8] )
		&& ((out_port2_expected_prev[8] !== last_out_port2_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[8] = out_port2_expected_prev[8];
	end
	if (
		( out_port2_expected_prev[9] !== 1'bx ) && ( out_port2_prev[9] !== out_port2_expected_prev[9] )
		&& ((out_port2_expected_prev[9] !== last_out_port2_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[9] = out_port2_expected_prev[9];
	end
	if (
		( out_port2_expected_prev[10] !== 1'bx ) && ( out_port2_prev[10] !== out_port2_expected_prev[10] )
		&& ((out_port2_expected_prev[10] !== last_out_port2_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[10] = out_port2_expected_prev[10];
	end
	if (
		( out_port2_expected_prev[11] !== 1'bx ) && ( out_port2_prev[11] !== out_port2_expected_prev[11] )
		&& ((out_port2_expected_prev[11] !== last_out_port2_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[11] = out_port2_expected_prev[11];
	end
	if (
		( out_port2_expected_prev[12] !== 1'bx ) && ( out_port2_prev[12] !== out_port2_expected_prev[12] )
		&& ((out_port2_expected_prev[12] !== last_out_port2_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[12] = out_port2_expected_prev[12];
	end
	if (
		( out_port2_expected_prev[13] !== 1'bx ) && ( out_port2_prev[13] !== out_port2_expected_prev[13] )
		&& ((out_port2_expected_prev[13] !== last_out_port2_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[13] = out_port2_expected_prev[13];
	end
	if (
		( out_port2_expected_prev[14] !== 1'bx ) && ( out_port2_prev[14] !== out_port2_expected_prev[14] )
		&& ((out_port2_expected_prev[14] !== last_out_port2_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[14] = out_port2_expected_prev[14];
	end
	if (
		( out_port2_expected_prev[15] !== 1'bx ) && ( out_port2_prev[15] !== out_port2_expected_prev[15] )
		&& ((out_port2_expected_prev[15] !== last_out_port2_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[15] = out_port2_expected_prev[15];
	end
	if (
		( out_port2_expected_prev[16] !== 1'bx ) && ( out_port2_prev[16] !== out_port2_expected_prev[16] )
		&& ((out_port2_expected_prev[16] !== last_out_port2_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[16] = out_port2_expected_prev[16];
	end
	if (
		( out_port2_expected_prev[17] !== 1'bx ) && ( out_port2_prev[17] !== out_port2_expected_prev[17] )
		&& ((out_port2_expected_prev[17] !== last_out_port2_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[17] = out_port2_expected_prev[17];
	end
	if (
		( out_port2_expected_prev[18] !== 1'bx ) && ( out_port2_prev[18] !== out_port2_expected_prev[18] )
		&& ((out_port2_expected_prev[18] !== last_out_port2_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[18] = out_port2_expected_prev[18];
	end
	if (
		( out_port2_expected_prev[19] !== 1'bx ) && ( out_port2_prev[19] !== out_port2_expected_prev[19] )
		&& ((out_port2_expected_prev[19] !== last_out_port2_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[19] = out_port2_expected_prev[19];
	end
	if (
		( out_port2_expected_prev[20] !== 1'bx ) && ( out_port2_prev[20] !== out_port2_expected_prev[20] )
		&& ((out_port2_expected_prev[20] !== last_out_port2_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[20] = out_port2_expected_prev[20];
	end
	if (
		( out_port2_expected_prev[21] !== 1'bx ) && ( out_port2_prev[21] !== out_port2_expected_prev[21] )
		&& ((out_port2_expected_prev[21] !== last_out_port2_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[21] = out_port2_expected_prev[21];
	end
	if (
		( out_port2_expected_prev[22] !== 1'bx ) && ( out_port2_prev[22] !== out_port2_expected_prev[22] )
		&& ((out_port2_expected_prev[22] !== last_out_port2_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[22] = out_port2_expected_prev[22];
	end
	if (
		( out_port2_expected_prev[23] !== 1'bx ) && ( out_port2_prev[23] !== out_port2_expected_prev[23] )
		&& ((out_port2_expected_prev[23] !== last_out_port2_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[23] = out_port2_expected_prev[23];
	end
	if (
		( out_port2_expected_prev[24] !== 1'bx ) && ( out_port2_prev[24] !== out_port2_expected_prev[24] )
		&& ((out_port2_expected_prev[24] !== last_out_port2_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[24] = out_port2_expected_prev[24];
	end
	if (
		( out_port2_expected_prev[25] !== 1'bx ) && ( out_port2_prev[25] !== out_port2_expected_prev[25] )
		&& ((out_port2_expected_prev[25] !== last_out_port2_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[25] = out_port2_expected_prev[25];
	end
	if (
		( out_port2_expected_prev[26] !== 1'bx ) && ( out_port2_prev[26] !== out_port2_expected_prev[26] )
		&& ((out_port2_expected_prev[26] !== last_out_port2_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[26] = out_port2_expected_prev[26];
	end
	if (
		( out_port2_expected_prev[27] !== 1'bx ) && ( out_port2_prev[27] !== out_port2_expected_prev[27] )
		&& ((out_port2_expected_prev[27] !== last_out_port2_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[27] = out_port2_expected_prev[27];
	end
	if (
		( out_port2_expected_prev[28] !== 1'bx ) && ( out_port2_prev[28] !== out_port2_expected_prev[28] )
		&& ((out_port2_expected_prev[28] !== last_out_port2_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[28] = out_port2_expected_prev[28];
	end
	if (
		( out_port2_expected_prev[29] !== 1'bx ) && ( out_port2_prev[29] !== out_port2_expected_prev[29] )
		&& ((out_port2_expected_prev[29] !== last_out_port2_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[29] = out_port2_expected_prev[29];
	end
	if (
		( out_port2_expected_prev[30] !== 1'bx ) && ( out_port2_prev[30] !== out_port2_expected_prev[30] )
		&& ((out_port2_expected_prev[30] !== last_out_port2_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[30] = out_port2_expected_prev[30];
	end
	if (
		( out_port2_expected_prev[31] !== 1'bx ) && ( out_port2_prev[31] !== out_port2_expected_prev[31] )
		&& ((out_port2_expected_prev[31] !== last_out_port2_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_port2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_port2_expected_prev);
		$display ("     Real value = %b", out_port2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_out_port2_exp[31] = out_port2_expected_prev[31];
	end
	if (
		( owalu_expected_prev[0] !== 1'bx ) && ( owalu_prev[0] !== owalu_expected_prev[0] )
		&& ((owalu_expected_prev[0] !== last_owalu_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[0] = owalu_expected_prev[0];
	end
	if (
		( owalu_expected_prev[1] !== 1'bx ) && ( owalu_prev[1] !== owalu_expected_prev[1] )
		&& ((owalu_expected_prev[1] !== last_owalu_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[1] = owalu_expected_prev[1];
	end
	if (
		( owalu_expected_prev[2] !== 1'bx ) && ( owalu_prev[2] !== owalu_expected_prev[2] )
		&& ((owalu_expected_prev[2] !== last_owalu_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[2] = owalu_expected_prev[2];
	end
	if (
		( owalu_expected_prev[3] !== 1'bx ) && ( owalu_prev[3] !== owalu_expected_prev[3] )
		&& ((owalu_expected_prev[3] !== last_owalu_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[3] = owalu_expected_prev[3];
	end
	if (
		( owalu_expected_prev[4] !== 1'bx ) && ( owalu_prev[4] !== owalu_expected_prev[4] )
		&& ((owalu_expected_prev[4] !== last_owalu_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[4] = owalu_expected_prev[4];
	end
	if (
		( owalu_expected_prev[5] !== 1'bx ) && ( owalu_prev[5] !== owalu_expected_prev[5] )
		&& ((owalu_expected_prev[5] !== last_owalu_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[5] = owalu_expected_prev[5];
	end
	if (
		( owalu_expected_prev[6] !== 1'bx ) && ( owalu_prev[6] !== owalu_expected_prev[6] )
		&& ((owalu_expected_prev[6] !== last_owalu_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[6] = owalu_expected_prev[6];
	end
	if (
		( owalu_expected_prev[7] !== 1'bx ) && ( owalu_prev[7] !== owalu_expected_prev[7] )
		&& ((owalu_expected_prev[7] !== last_owalu_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[7] = owalu_expected_prev[7];
	end
	if (
		( owalu_expected_prev[8] !== 1'bx ) && ( owalu_prev[8] !== owalu_expected_prev[8] )
		&& ((owalu_expected_prev[8] !== last_owalu_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[8] = owalu_expected_prev[8];
	end
	if (
		( owalu_expected_prev[9] !== 1'bx ) && ( owalu_prev[9] !== owalu_expected_prev[9] )
		&& ((owalu_expected_prev[9] !== last_owalu_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[9] = owalu_expected_prev[9];
	end
	if (
		( owalu_expected_prev[10] !== 1'bx ) && ( owalu_prev[10] !== owalu_expected_prev[10] )
		&& ((owalu_expected_prev[10] !== last_owalu_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[10] = owalu_expected_prev[10];
	end
	if (
		( owalu_expected_prev[11] !== 1'bx ) && ( owalu_prev[11] !== owalu_expected_prev[11] )
		&& ((owalu_expected_prev[11] !== last_owalu_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[11] = owalu_expected_prev[11];
	end
	if (
		( owalu_expected_prev[12] !== 1'bx ) && ( owalu_prev[12] !== owalu_expected_prev[12] )
		&& ((owalu_expected_prev[12] !== last_owalu_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[12] = owalu_expected_prev[12];
	end
	if (
		( owalu_expected_prev[13] !== 1'bx ) && ( owalu_prev[13] !== owalu_expected_prev[13] )
		&& ((owalu_expected_prev[13] !== last_owalu_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[13] = owalu_expected_prev[13];
	end
	if (
		( owalu_expected_prev[14] !== 1'bx ) && ( owalu_prev[14] !== owalu_expected_prev[14] )
		&& ((owalu_expected_prev[14] !== last_owalu_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[14] = owalu_expected_prev[14];
	end
	if (
		( owalu_expected_prev[15] !== 1'bx ) && ( owalu_prev[15] !== owalu_expected_prev[15] )
		&& ((owalu_expected_prev[15] !== last_owalu_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[15] = owalu_expected_prev[15];
	end
	if (
		( owalu_expected_prev[16] !== 1'bx ) && ( owalu_prev[16] !== owalu_expected_prev[16] )
		&& ((owalu_expected_prev[16] !== last_owalu_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[16] = owalu_expected_prev[16];
	end
	if (
		( owalu_expected_prev[17] !== 1'bx ) && ( owalu_prev[17] !== owalu_expected_prev[17] )
		&& ((owalu_expected_prev[17] !== last_owalu_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[17] = owalu_expected_prev[17];
	end
	if (
		( owalu_expected_prev[18] !== 1'bx ) && ( owalu_prev[18] !== owalu_expected_prev[18] )
		&& ((owalu_expected_prev[18] !== last_owalu_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[18] = owalu_expected_prev[18];
	end
	if (
		( owalu_expected_prev[19] !== 1'bx ) && ( owalu_prev[19] !== owalu_expected_prev[19] )
		&& ((owalu_expected_prev[19] !== last_owalu_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[19] = owalu_expected_prev[19];
	end
	if (
		( owalu_expected_prev[20] !== 1'bx ) && ( owalu_prev[20] !== owalu_expected_prev[20] )
		&& ((owalu_expected_prev[20] !== last_owalu_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[20] = owalu_expected_prev[20];
	end
	if (
		( owalu_expected_prev[21] !== 1'bx ) && ( owalu_prev[21] !== owalu_expected_prev[21] )
		&& ((owalu_expected_prev[21] !== last_owalu_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[21] = owalu_expected_prev[21];
	end
	if (
		( owalu_expected_prev[22] !== 1'bx ) && ( owalu_prev[22] !== owalu_expected_prev[22] )
		&& ((owalu_expected_prev[22] !== last_owalu_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[22] = owalu_expected_prev[22];
	end
	if (
		( owalu_expected_prev[23] !== 1'bx ) && ( owalu_prev[23] !== owalu_expected_prev[23] )
		&& ((owalu_expected_prev[23] !== last_owalu_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[23] = owalu_expected_prev[23];
	end
	if (
		( owalu_expected_prev[24] !== 1'bx ) && ( owalu_prev[24] !== owalu_expected_prev[24] )
		&& ((owalu_expected_prev[24] !== last_owalu_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[24] = owalu_expected_prev[24];
	end
	if (
		( owalu_expected_prev[25] !== 1'bx ) && ( owalu_prev[25] !== owalu_expected_prev[25] )
		&& ((owalu_expected_prev[25] !== last_owalu_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[25] = owalu_expected_prev[25];
	end
	if (
		( owalu_expected_prev[26] !== 1'bx ) && ( owalu_prev[26] !== owalu_expected_prev[26] )
		&& ((owalu_expected_prev[26] !== last_owalu_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[26] = owalu_expected_prev[26];
	end
	if (
		( owalu_expected_prev[27] !== 1'bx ) && ( owalu_prev[27] !== owalu_expected_prev[27] )
		&& ((owalu_expected_prev[27] !== last_owalu_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[27] = owalu_expected_prev[27];
	end
	if (
		( owalu_expected_prev[28] !== 1'bx ) && ( owalu_prev[28] !== owalu_expected_prev[28] )
		&& ((owalu_expected_prev[28] !== last_owalu_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[28] = owalu_expected_prev[28];
	end
	if (
		( owalu_expected_prev[29] !== 1'bx ) && ( owalu_prev[29] !== owalu_expected_prev[29] )
		&& ((owalu_expected_prev[29] !== last_owalu_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[29] = owalu_expected_prev[29];
	end
	if (
		( owalu_expected_prev[30] !== 1'bx ) && ( owalu_prev[30] !== owalu_expected_prev[30] )
		&& ((owalu_expected_prev[30] !== last_owalu_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[30] = owalu_expected_prev[30];
	end
	if (
		( owalu_expected_prev[31] !== 1'bx ) && ( owalu_prev[31] !== owalu_expected_prev[31] )
		&& ((owalu_expected_prev[31] !== last_owalu_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port owalu[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", owalu_expected_prev);
		$display ("     Real value = %b", owalu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_owalu_exp[31] = owalu_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pipelined_computer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [5:0] in_port0;
reg [5:0] in_port1;
reg resetn;
// wires                                               
wire mem_clock;
wire [31:0] oealu;
wire [31:0] oins;
wire [31:0] oinst;
wire [31:0] omalu;
wire [31:0] onpc;
wire [31:0] opc;
wire [31:0] out_port0;
wire [31:0] out_port1;
wire [31:0] out_port2;
wire [31:0] out_port3;
wire [31:0] owalu;

wire sampler;                             

// assign statements (if any)                          
pipelined_computer i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.in_port0(in_port0),
	.in_port1(in_port1),
	.mem_clock(mem_clock),
	.oealu(oealu),
	.oins(oins),
	.oinst(oinst),
	.omalu(omalu),
	.onpc(onpc),
	.opc(opc),
	.out_port0(out_port0),
	.out_port1(out_port1),
	.out_port2(out_port2),
	.out_port3(out_port3),
	.owalu(owalu),
	.resetn(resetn)
);

// resetn
initial
begin
	resetn = 1'b0;
	resetn = #30000 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
// in_port0[ 5 ]
initial
begin
	in_port0[5] = 1'b0;
end 
// in_port0[ 4 ]
initial
begin
	in_port0[4] = 1'b0;
end 
// in_port0[ 3 ]
initial
begin
	in_port0[3] = 1'b0;
	in_port0[3] = #840000 1'b1;
end 
// in_port0[ 2 ]
initial
begin
	in_port0[2] = 1'b0;
	in_port0[2] = #360000 1'b1;
	in_port0[2] = #480000 1'b0;
end 
// in_port0[ 1 ]
initial
begin
	in_port0[1] = 1'b0;
	in_port0[1] = #120000 1'b1;
	in_port0[1] = #240000 1'b0;
	in_port0[1] = #240000 1'b1;
	in_port0[1] = #240000 1'b0;
end 
// in_port0[ 0 ]
initial
begin
	repeat(4)
	begin
		in_port0[0] = 1'b1;
		in_port0[0] = #120000 1'b0;
		# 120000;
	end
	in_port0[0] = 1'b1;
end 
// in_port1[ 5 ]
initial
begin
	in_port1[5] = 1'b0;
end 
// in_port1[ 4 ]
initial
begin
	in_port1[4] = 1'b0;
end 
// in_port1[ 3 ]
initial
begin
	in_port1[3] = 1'b0;
	in_port1[3] = #720000 1'b1;
end 
// in_port1[ 2 ]
initial
begin
	in_port1[2] = 1'b0;
	in_port1[2] = #240000 1'b1;
	in_port1[2] = #480000 1'b0;
end 
// in_port1[ 1 ]
initial
begin
	repeat(2)
	begin
		in_port1[1] = 1'b1;
		in_port1[1] = #240000 1'b0;
		# 240000;
	end
	in_port1[1] = 1'b1;
end 
// in_port1[ 0 ]
initial
begin
	repeat(4)
	begin
		in_port1[0] = 1'b0;
		in_port1[0] = #120000 1'b1;
		# 120000;
	end
	in_port1[0] = 1'b0;
end 

pipelined_computer_vlg_sample_tst tb_sample (
	.clock(clock),
	.in_port0(in_port0),
	.in_port1(in_port1),
	.resetn(resetn),
	.sampler_tx(sampler)
);

pipelined_computer_vlg_check_tst tb_out(
	.mem_clock(mem_clock),
	.oealu(oealu),
	.oins(oins),
	.oinst(oinst),
	.omalu(omalu),
	.onpc(onpc),
	.opc(opc),
	.out_port0(out_port0),
	.out_port1(out_port1),
	.out_port2(out_port2),
	.out_port3(out_port3),
	.owalu(owalu),
	.sampler_rx(sampler)
);
endmodule

